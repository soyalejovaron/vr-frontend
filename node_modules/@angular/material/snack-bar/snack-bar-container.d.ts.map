{"version":3,"file":"snack-bar-container.d.ts","sources":["snack-bar-container.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { AriaLivePoliteness } from '@angular/cdk/a11y';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, DomPortal } from '@angular/cdk/portal';\r\nimport { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, NgZone, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { MatSnackBarConfig } from './snack-bar-config';\r\n/**\r\n * Internal interface for a snack bar container.\r\n * @docs-private\r\n */\r\nexport interface _SnackBarContainer {\r\n    snackBarConfig: MatSnackBarConfig;\r\n    _onAnnounce: Subject<any>;\r\n    _onExit: Subject<any>;\r\n    _onEnter: Subject<any>;\r\n    enter: () => void;\r\n    exit: () => Observable<void>;\r\n    attachTemplatePortal: <C>(portal: TemplatePortal<C>) => EmbeddedViewRef<C>;\r\n    attachComponentPortal: <T>(portal: ComponentPortal<T>) => ComponentRef<T>;\r\n}\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * @docs-private\r\n */\r\nexport declare class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy, _SnackBarContainer {\r\n    private _ngZone;\r\n    private _elementRef;\r\n    private _changeDetectorRef;\r\n    private _platform;\r\n    /** The snack bar configuration. */\r\n    snackBarConfig: MatSnackBarConfig;\r\n    /** The number of milliseconds to wait before announcing the snack bar's content. */\r\n    private readonly _announceDelay;\r\n    /** The timeout for announcing the snack bar's content. */\r\n    private _announceTimeoutId;\r\n    /** Whether the component has been destroyed. */\r\n    private _destroyed;\r\n    /** The portal outlet inside of this container into which the snack bar content will be loaded. */\r\n    _portalOutlet: CdkPortalOutlet;\r\n    /** Subject for notifying that the snack bar has announced to screen readers. */\r\n    readonly _onAnnounce: Subject<void>;\r\n    /** Subject for notifying that the snack bar has exited from view. */\r\n    readonly _onExit: Subject<void>;\r\n    /** Subject for notifying that the snack bar has finished entering the view. */\r\n    readonly _onEnter: Subject<void>;\r\n    /** The state of the snack bar animations. */\r\n    _animationState: string;\r\n    /** aria-live value for the live region. */\r\n    _live: AriaLivePoliteness;\r\n    /**\r\n     * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\r\n     * JAWS does not read out aria-live message.\r\n     */\r\n    _role?: 'status' | 'alert';\r\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _changeDetectorRef: ChangeDetectorRef, _platform: Platform, \r\n    /** The snack bar configuration. */\r\n    snackBarConfig: MatSnackBarConfig);\r\n    /** Attach a component portal as content to this snack bar container. */\r\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\r\n    /** Attach a template portal as content to this snack bar container. */\r\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\r\n    /**\r\n     * Attaches a DOM portal to the snack bar container.\r\n     * @deprecated To be turned into a method.\r\n     * @breaking-change 10.0.0\r\n     */\r\n    attachDomPortal: (portal: DomPortal) => void;\r\n    /** Handle end of animations, updating the state of the snackbar. */\r\n    onAnimationEnd(event: AnimationEvent): void;\r\n    /** Begin animation of snack bar entrance into view. */\r\n    enter(): void;\r\n    /** Begin animation of the snack bar exiting from view. */\r\n    exit(): Observable<void>;\r\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Waits for the zone to settle before removing the element. Helps prevent\r\n     * errors where we end up removing an element which is in the middle of an animation.\r\n     */\r\n    private _completeExit;\r\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\r\n    private _applySnackBarClasses;\r\n    /** Asserts that no content is already attached to the container. */\r\n    private _assertNotAttached;\r\n    /**\r\n     * Starts a timeout to move the snack bar content to the live region so screen readers will\r\n     * announce it.\r\n     */\r\n    private _screenReaderAnnounce;\r\n}\r\n"]}