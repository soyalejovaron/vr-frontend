{"version":3,"file":"datepicker.js","sources":["../../../../../../src/material/datepicker/datepicker-errors.ts","../../../../../../src/material/datepicker/datepicker-intl.ts","../../../../../../src/material/datepicker/calendar-body.ts","../../../../../../src/material/datepicker/date-selection-model.ts","../../../../../../src/material/datepicker/date-range-selection-strategy.ts","../../../../../../src/material/datepicker/month-view.ts","../../../../../../src/material/datepicker/multi-year-view.ts","../../../../../../src/material/datepicker/year-view.ts","../../../../../../src/material/datepicker/calendar.ts","../../../../../../src/material/datepicker/datepicker-animations.ts","../../../../../../src/material/datepicker/datepicker-base.ts","../../../../../../src/material/datepicker/datepicker.ts","../../../../../../src/material/datepicker/datepicker-input-base.ts","../../../../../../src/material/datepicker/datepicker-input.ts","../../../../../../src/material/datepicker/datepicker-toggle.ts","../../../../../../src/material/datepicker/date-range-input-parts.ts","../../../../../../src/material/datepicker/date-range-input.ts","../../../../../../src/material/datepicker/date-range-picker.ts","../../../../../../src/material/datepicker/datepicker-actions.ts","../../../../../../src/material/datepicker/datepicker-module.ts","../../../../../../src/material/datepicker/public-api.ts","../../../../../../src/material/datepicker/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** Label for the button used to close the calendar popup. */\n  closeCalendarLabel: string = 'Close calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n\n  /** Formats a range of years. */\n  formatYearRange(start: string, end: string): string {\n    return `${start} \\u2013 ${end}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/** Extra CSS classes that can be associated with a calendar cell. */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/** Function that can generate the extra classes that should be added to a calendar cell. */\nexport type MatCalendarCellClassFunction<D> =\n    (date: D, view: 'month' | 'year' | 'multi-year') => MatCalendarCellCssClasses;\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell<D = any> {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses: MatCalendarCellCssClasses = {},\n              public compareValue = value,\n              public rawValue?: D) {}\n}\n\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\nexport interface MatCalendarUserEvent<D> {\n  value: D;\n  event: Event;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody implements OnChanges, OnDestroy {\n  /**\n   * Used to skip the next focus event when rendering the preview range.\n   * We need a flag like this, because some browsers fire focus events asynchronously.\n   */\n  private _skipNextFocus: boolean;\n\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** Start value of the selected date range. */\n  @Input() startValue: number;\n\n  /** End value of the selected date range. */\n  @Input() endValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols: number = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell: number = 0;\n\n  /** Whether a range is being selected. */\n  @Input() isRange: boolean = false;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio: number = 1;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: number | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: number | null;\n\n  /** Start of the preview range. */\n  @Input() previewStart: number | null = null;\n\n  /** End of the preview range. */\n  @Input() previewEnd: number | null = null;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<MatCalendarUserEvent<number>> =\n      new EventEmitter<MatCalendarUserEvent<number>>();\n\n  /** Emits when the preview has changed as a result of a user action. */\n  @Output() previewChange = new EventEmitter<MatCalendarUserEvent<MatCalendarCell | null>>();\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  _firstRowOffset: number;\n\n  /** Padding for the individual date cells. */\n  _cellPadding: string;\n\n  /** Width of an individual cell. */\n  _cellWidth: string;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\n    _ngZone.runOutsideAngular(() => {\n      const element = _elementRef.nativeElement;\n      element.addEventListener('mouseenter', this._enterHandler, true);\n      element.addEventListener('focus', this._enterHandler, true);\n      element.addEventListener('mouseleave', this._leaveHandler, true);\n      element.addEventListener('blur', this._leaveHandler, true);\n    });\n  }\n\n  /** Called when a cell is clicked. */\n  _cellClicked(cell: MatCalendarCell, event: MouseEvent): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit({value: cell.value, event});\n    }\n  }\n\n  /** Returns whether a cell should be marked as selected. */\n  _isSelected(value: number) {\n    return this.startValue === value || this.endValue === value;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const columnChanges = changes['numCols'];\n    const {rows, numCols} = this;\n\n    if (changes['rows'] || columnChanges) {\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n    }\n\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n      this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n    }\n\n    if (columnChanges || !this._cellWidth) {\n      this._cellWidth = `${100 / numCols}%`;\n    }\n  }\n\n  ngOnDestroy() {\n    const element = this._elementRef.nativeElement;\n    element.removeEventListener('mouseenter', this._enterHandler, true);\n    element.removeEventListener('focus', this._enterHandler, true);\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\n    element.removeEventListener('blur', this._leaveHandler, true);\n  }\n\n  /** Returns whether a cell is active. */\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview = true) {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          if (!movePreview) {\n            this._skipNextFocus = true;\n          }\n\n          activeCell.focus();\n        }\n      });\n    });\n  }\n\n  /** Gets whether a value is the start of the main range. */\n  _isRangeStart(value: number) {\n    return isStart(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is the end of the main range. */\n  _isRangeEnd(value: number) {\n    return isEnd(value, this.startValue, this.endValue);\n  }\n\n  /** Gets whether a value is within the currently-selected range. */\n  _isInRange(value: number): boolean {\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\n  }\n\n  /** Gets whether a value is the start of the comparison range. */\n  _isComparisonStart(value: number) {\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let previousCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\n\n    if (!previousCell) {\n      const previousRow = this.rows[rowIndex - 1];\n      previousCell = previousRow && previousRow[previousRow.length - 1];\n    }\n\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\n  }\n\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n      return false;\n    }\n\n    let nextCell: MatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\n\n    if (!nextCell) {\n      const nextRow = this.rows[rowIndex + 1];\n      nextCell = nextRow && nextRow[0];\n    }\n\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\n  }\n\n  /** Gets whether a value is the end of the comparison range. */\n  _isComparisonEnd(value: number) {\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\n  }\n\n  /** Gets whether a value is within the current comparison range. */\n  _isInComparisonRange(value: number) {\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n  }\n\n  /**\n   * Gets whether a value is the same as the start and end of the comparison range.\n   * For context, the functions that we use to determine whether something is the start/end of\n   * a range don't allow for the start and end to be on the same day, because we'd have to use\n   * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n   * the regular range, because when it happens, the selected styles take over and still show where\n   * the range would've been, however we don't have these selected styles for a comparison range.\n   * This function is used to apply a class that serves the same purpose as the one for selected\n   * dates, but it only applies in the context of a comparison range.\n   */\n  _isComparisonIdentical(value: number) {\n    // Note that we don't need to null check the start/end\n    // here, because the `value` will always be defined.\n    return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n  }\n\n  /** Gets whether a value is the start of the preview range. */\n  _isPreviewStart(value: number) {\n    return isStart(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is the end of the preview range. */\n  _isPreviewEnd(value: number) {\n    return isEnd(value, this.previewStart, this.previewEnd);\n  }\n\n  /** Gets whether a value is inside the preview range. */\n  _isInPreview(value: number) {\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n  }\n\n  /**\n   * Event handler for when the user enters an element\n   * inside the calendar body (e.g. by hovering in or focus).\n   */\n  private _enterHandler = (event: Event) => {\n    if (this._skipNextFocus && event.type === 'focus') {\n      this._skipNextFocus = false;\n      return;\n    }\n\n    // We only need to hit the zone when we're selecting a range.\n    if (event.target && this.isRange) {\n      const cell = this._getCellFromElement(event.target as HTMLElement);\n\n      if (cell) {\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\n      }\n    }\n  }\n\n  /**\n   * Event handler for when the user's pointer leaves an element\n   * inside the calendar body (e.g. by hovering out or blurring).\n   */\n  private _leaveHandler = (event: Event) => {\n    // We only need to hit the zone when we're selecting a range.\n    if (this.previewEnd !== null && this.isRange) {\n      // Only reset the preview end value when leaving cells. This looks better, because\n      // we have a gap between the cells and the rows and we don't want to remove the\n      // range just for it to show up again when the user moves a few pixels to the side.\n      if (event.target && isTableCell(event.target as HTMLElement)) {\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\n      }\n    }\n  }\n\n  /** Finds the MatCalendarCell that corresponds to a DOM node. */\n  private _getCellFromElement(element: HTMLElement): MatCalendarCell | null {\n    let cell: HTMLElement | undefined;\n\n    if (isTableCell(element)) {\n      cell = element;\n    } else if (isTableCell(element.parentNode!)) {\n      cell = element.parentNode as HTMLElement;\n    }\n\n    if (cell) {\n      const row = cell.getAttribute('data-mat-row');\n      const col = cell.getAttribute('data-mat-col');\n\n      if (row && col) {\n        return this.rows[parseInt(row)][parseInt(col)];\n      }\n    }\n\n    return null;\n  }\n\n}\n\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node: Node): node is HTMLTableCellElement {\n  return node.nodeName === 'TD';\n}\n\n/** Checks whether a value is the start of a range. */\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\n  return end !== null && start !== end && value < end && value === start;\n}\n\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\n  return start !== null && start !== end && value >= start && value === end;\n}\n\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value: number,\n                   start: number | null,\n                   end: number | null,\n                   rangeEnabled: boolean): boolean {\n  return rangeEnabled && start !== null && end !== null && start !== end &&\n         value >= start && value <= end;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FactoryProvider, Injectable, Optional, SkipSelf, OnDestroy} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** A class representing a range of dates. */\nexport class DateRange<D> {\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  private _disableStructuralEquivalency: never;\n\n  constructor(\n    /** The start date of the range. */\n    readonly start: D | null,\n    /** The end date of the range. */\n    readonly end: D | null) {}\n}\n\n/**\n * Conditionally picks the date type, if a DateRange is passed in.\n * @docs-private\n */\nexport type ExtractDateTypeFromSelection<T> = T extends DateRange<infer D> ? D : NonNullable<T>;\n\n/**\n * Event emitted by the date selection model when its selection changes.\n * @docs-private\n */\nexport interface DateSelectionModelChange<S> {\n  /** New value for the selection. */\n  selection: S;\n\n  /** Object that triggered the change. */\n  source: unknown;\n}\n\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\n@Injectable()\nexport abstract class MatDateSelectionModel<S, D = ExtractDateTypeFromSelection<S>>\n    implements OnDestroy {\n  private _selectionChanged = new Subject<DateSelectionModelChange<S>>();\n\n  /** Emits when the selection has changed. */\n  selectionChanged: Observable<DateSelectionModelChange<S>> = this._selectionChanged;\n\n  protected constructor(\n    /** The current selection. */\n    readonly selection: S,\n    protected _adapter: DateAdapter<D>) {\n    this.selection = selection;\n  }\n\n  /**\n   * Updates the current selection in the model.\n   * @param value New selection that should be assigned.\n   * @param source Object that triggered the selection change.\n   */\n  updateSelection(value: S, source: unknown) {\n    (this as {selection: S}).selection = value;\n    this._selectionChanged.next({selection: value, source});\n  }\n\n  ngOnDestroy() {\n    this._selectionChanged.complete();\n  }\n\n  protected _isValidDateInstance(date: D): boolean {\n    return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n  }\n\n  /** Adds a date to the current selection. */\n  abstract add(date: D | null): void;\n\n  /** Checks whether the current selection is valid. */\n  abstract isValid(): boolean;\n\n  /** Checks whether the current selection is complete. */\n  abstract isComplete(): boolean;\n\n  /**\n   * Clones the selection model.\n   * @deprecated To be turned into an abstract method.\n   * @breaking-change 12.0.0\n   */\n  clone(): MatDateSelectionModel<S, D> {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw Error('Not implemented');\n    }\n\n    return null!;\n  }\n}\n\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\n@Injectable()\nexport class MatSingleDateSelectionModel<D> extends MatDateSelectionModel<D | null, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(null, adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a single date selection, the added date\n   * simply overwrites the previous selection\n   */\n  add(date: D | null) {\n    super.updateSelection(date, this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    return this.selection != null && this._isValidDateInstance(this.selection);\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a single date selection, this\n   * is true if the current selection is not null.\n   */\n  isComplete() {\n    return this.selection != null;\n  }\n\n  /** Clones the selection model. */\n  clone() {\n    const clone = new MatSingleDateSelectionModel<D>(this._adapter);\n    clone.updateSelection(this.selection, this);\n    return clone;\n  }\n}\n\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\n@Injectable()\nexport class MatRangeDateSelectionModel<D> extends MatDateSelectionModel<DateRange<D>, D> {\n  constructor(adapter: DateAdapter<D>) {\n    super(new DateRange<D>(null, null), adapter);\n  }\n\n  /**\n   * Adds a date to the current selection. In the case of a date range selection, the added date\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\n   */\n  add(date: D | null): void {\n    let {start, end} = this.selection;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    super.updateSelection(new DateRange<D>(start, end), this);\n  }\n\n  /** Checks whether the current selection is valid. */\n  isValid(): boolean {\n    const {start, end} = this.selection;\n\n    // Empty ranges are valid.\n    if (start == null && end == null) {\n      return true;\n    }\n\n    // Complete ranges are only valid if both dates are valid and the start is before the end.\n    if (start != null && end != null) {\n      return this._isValidDateInstance(start) && this._isValidDateInstance(end) &&\n             this._adapter.compareDate(start, end) <= 0;\n    }\n\n    // Partial ranges are valid if the start/end is valid.\n    return (start == null || this._isValidDateInstance(start)) &&\n           (end == null || this._isValidDateInstance(end));\n  }\n\n  /**\n   * Checks whether the current selection is complete. In the case of a date range selection, this\n   * is true if the current selection has a non-null `start` and `end`.\n   */\n  isComplete(): boolean {\n    return this.selection.start != null && this.selection.end != null;\n  }\n\n  /** Clones the selection model. */\n  clone() {\n    const clone = new MatRangeDateSelectionModel<D>(this._adapter);\n    clone.updateSelection(this.selection, this);\n    return clone;\n  }\n}\n\n/** @docs-private */\nexport function MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(\n    parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n */\nexport const MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\n};\n\n\n/** @docs-private */\nexport function MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(\n    parent: MatSingleDateSelectionModel<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n */\nexport const MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\n  provide: MatDateSelectionModel,\n  deps: [[new Optional(), new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Optional, SkipSelf, FactoryProvider} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {DateRange} from './date-selection-model';\n\n/** Injection token used to customize the date range selection behavior. */\nexport const MAT_DATE_RANGE_SELECTION_STRATEGY =\n    new InjectionToken<MatDateRangeSelectionStrategy<any>>('MAT_DATE_RANGE_SELECTION_STRATEGY');\n\n/** Object that can be provided in order to customize the date range selection behavior. */\nexport interface MatDateRangeSelectionStrategy<D> {\n  /**\n   * Called when the user has finished selecting a value.\n   * @param date Date that was selected. Will be null if the user cleared the selection.\n   * @param currentRange Range that is currently show in the calendar.\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\n   *    event, but it may get expanded in the future.\n   */\n  selectionFinished(date: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n\n  /**\n   * Called when the user has activated a new date (e.g. by hovering over\n   * it or moving focus) and the calendar tries to display a date range.\n   *\n   * @param activeDate Date that the user has activated. Will be null if the user moved\n   *    focus to an element that's no a calendar cell.\n   * @param currentRange Range that is currently shown in the calendar.\n   * @param event DOM event that caused the preview to be changed. Will be either a\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\n   */\n  createPreview(activeDate: D | null, currentRange: DateRange<D>, event: Event): DateRange<D>;\n}\n\n/** Provides the default date range selection behavior. */\n@Injectable()\nexport class DefaultMatCalendarRangeStrategy<D> implements MatDateRangeSelectionStrategy<D> {\n  constructor(private _dateAdapter: DateAdapter<D>) {}\n\n  selectionFinished(date: D, currentRange: DateRange<D>) {\n    let {start, end} = currentRange;\n\n    if (start == null) {\n      start = date;\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n      end = date;\n    } else {\n      start = date;\n      end = null;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n\n  createPreview(activeDate: D | null, currentRange: DateRange<D>) {\n    let start: D | null = null;\n    let end: D | null = null;\n\n    if (currentRange.start && !currentRange.end && activeDate) {\n      start = currentRange.start;\n      end = activeDate;\n    }\n\n    return new DateRange<D>(start, end);\n  }\n}\n\n\n/** @docs-private */\nexport function MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(\n  parent: MatDateRangeSelectionStrategy<unknown>, adapter: DateAdapter<unknown>) {\n  return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n\n/** @docs-private */\nexport const MAT_CALENDAR_RANGE_STRATEGY_PROVIDER: FactoryProvider = {\n  provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n  deps: [[new Optional(), new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n  useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n  ESCAPE,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n  OnDestroy,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarUserEvent,\n  MatCalendarCellClassFunction,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\nimport {\n  MatDateRangeSelectionStrategy,\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n} from './date-range-selection-strategy';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n      this._dateAdapter.getValidDateOrNull(\n        this._dateAdapter.deserialize(value)\n      ) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setRanges(this._selected);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /** Start value of the currently-shown date range. */\n  _rangeStart: number | null;\n\n  /** End value of the currently-shown date range. */\n  _rangeEnd: number | null;\n\n  /** Start value of the currently-shown comparison date range. */\n  _comparisonRangeStart: number | null;\n\n  /** End value of the currently-shown comparison date range. */\n  _comparisonRangeEnd: number | null;\n\n  /** Start of the preview range. */\n  _previewStart: number | null;\n\n  /** End of the preview range. */\n  _previewEnd: number | null;\n\n  /** Whether the user is currently selecting a range of dates. */\n  _isRange: boolean;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(readonly _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality,\n              @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY) @Optional()\n                  private _rangeStrategy?: MatDateRangeSelectionStrategy<D>) {\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n\n    if (comparisonChange && !comparisonChange.firstChange) {\n      this._setRanges(this.selected);\n    }\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(event: MatCalendarUserEvent<number>) {\n    const date = event.value;\n    const selectedYear = this._dateAdapter.getYear(this.activeDate);\n    const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n    const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n    let rangeStartDate: number | null;\n    let rangeEndDate: number | null;\n\n    if (this._selected instanceof DateRange) {\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n    } else {\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n    }\n\n    if (rangeStartDate !== date || rangeEndDate !== date) {\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit({value: selectedDate, event: event.event});\n    this._previewStart = this._previewEnd = null;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected({value: this._dateAdapter.getDate(this._activeDate), event});\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      case ESCAPE:\n        // Abort the current range selection if the user presses escape mid-selection.\n        if (this._previewEnd != null && !hasModifierKey(event)) {\n          this._previewStart = this._previewEnd = null;\n          this.selectedChange.emit(null);\n          this._userSelection.emit({value: null, event});\n          event.preventDefault();\n          event.stopPropagation(); // Prevents the overlay from closing.\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._setRanges(this.selected);\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n    this._monthLabel = this._dateFormats.display.monthLabel\n        ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel)\n        : this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._initWeekdays();\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell(movePreview?: boolean) {\n    this._matCalendarBody._focusActiveCell(movePreview);\n  }\n\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\n  _previewChanged({event, value: cell}: MatCalendarUserEvent<MatCalendarCell<D> | null>) {\n    if (this._rangeStrategy) {\n      // We can assume that this will be a range, because preview\n      // events aren't fired for single date selections.\n      const value = cell ? cell.rawValue! : null;\n      const previewRange =\n          this._rangeStrategy.createPreview(value, this.selected as DateRange<D>, event);\n      this._previewStart = this._getCellCompareValue(previewRange.start);\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\n\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n      // when navigating one month back using the keyboard which will cause this handler\n      // to throw a \"changed after checked\" error when updating the preview state.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Initializes the weekdays. */\n  private _initWeekdays() {\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n        return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n\n      this._weeks[this._weeks.length - 1].push(new MatCalendarCell<D>(i + 1, dateNames[i],\n          ariaLabel, enabled, cellClasses, this._getCellCompareValue(date)!, date));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\n        (!this.dateFilter || this.dateFilter(date));\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /** Gets the value that will be used to one cell to another. */\n  private _getCellCompareValue(date: D | null): number | null {\n    if (date) {\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\n      // cell values, because we need to support ranges that span across multiple months/years.\n      const year = this._dateAdapter.getYear(date);\n      const month = this._dateAdapter.getMonth(date);\n      const day = this._dateAdapter.getDate(date);\n      return new Date(year, month, day).getTime();\n    }\n\n    return null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the current range based on a model value. */\n  private _setRanges(selectedValue: DateRange<D> | D | null) {\n    if (selectedValue instanceof DateRange) {\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n      this._isRange = true;\n    } else {\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n      this._isRange = false;\n    }\n\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarUserEvent,\n  MatCalendarCellClassFunction,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n      this._dateAdapter.getValidDateOrNull(\n        this._dateAdapter.deserialize(value)\n      ) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n    if (!isSameMultiYearView(\n      this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedYear(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to date cells. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n\n    // We want a range years such that we maximize the number of\n    // enabled dates visible at once. This prevents issues where the minimum year\n    // is the last item of a page OR the maximum year is the first item of a page.\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view.\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(minYearOfPage + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(event: MatCalendarUserEvent<number>) {\n    const year = event.value;\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n          yearsPerPage - getActiveOffset(\n            this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected({value: this._dateAdapter.getYear(this._activeDate), event});\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    const date = this._dateAdapter.createDate(year, 0, 1);\n    const yearName = this._dateAdapter.getYearName(date);\n    const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-highlighted year based on a model value. */\n  private _setSelectedYear(value: DateRange<D> | D | null) {\n    this._selectedYear = null;\n\n    if (value instanceof DateRange) {\n      const displayValue = value.start || value.end;\n\n      if (displayValue) {\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\n      }\n    } else if (value) {\n      this._selectedYear = this._dateAdapter.getYear(value);\n    }\n  }\n}\n\nexport function isSameMultiYearView<D>(\n  dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) ===\n          Math.floor((year2 - startingYear) / yearsPerPage);\n}\n\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nexport function getActiveOffset<D>(\n  dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo((activeYear - getStartingYear(dateAdapter, minDate, maxDate)),\n    yearsPerPage);\n}\n\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear<D>(\n  dateAdapter: DateAdapter<D>, minDate: D | null, maxDate: D | null): number {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo (a: number, b: number): number {\n  return (a % b + b) % b;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  MatCalendarBody,\n  MatCalendarCell,\n  MatCalendarUserEvent,\n  MatCalendarCellClassFunction,\n} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DateRange} from './date-selection-model';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit, OnDestroy {\n  private _rerenderSubscription = Subscription.EMPTY;\n\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n      this._dateAdapter.getValidDateOrNull(\n        this._dateAdapter.deserialize(value)\n      ) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n\n    this._setSelectedMonth(value);\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to date cells. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(readonly _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._rerenderSubscription = this._dateAdapter.localeChanges\n      .pipe(startWith(null))\n      .subscribe(() => this._init());\n  }\n\n  ngOnDestroy() {\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(event: MatCalendarUserEvent<number>) {\n    const month = event.value;\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected({value: this._dateAdapter.getMonth(this._activeDate), event});\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._setSelectedMonth(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n    const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n    const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n\n    return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel,\n        this._shouldEnableMonth(month), cellClasses);\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n\n  /** Sets the currently-selected month based on a model value. */\n  private _setSelectedMonth(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selectedMonth = this._getMonthInCurrentYear(value.start) ||\n                            this._getMonthInCurrentYear(value.end);\n    } else {\n      this._selectedMonth = this._getMonthInCurrentYear(value);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {MatCalendarUserEvent, MatCalendarCellClassFunction} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {\n  getActiveOffset,\n  isSameMultiYearView,\n  MatMultiYearView,\n  yearsPerPage\n} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Counter used to generate unique IDs. */\nlet uniqueId = 0;\n\n/** Default header for MatCalendar */\n@Component({\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  _buttonDescriptionId = `mat-calendar-button-${uniqueId++}`;\n\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n\n    // The offset from the active year to the \"slot\" for the starting year is the\n    // *actual* first rendered year in the multi-year view, and the last year is\n    // just yearsPerPage - 1 away.\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const minYearOfPage = activeYear - getActiveOffset(\n      this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n    const minYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n    const maxYearName =\n      this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n    return this._intl.formatYearRange(minYearName, maxYearName);\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return isSameMultiYearView(\n      this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): DateRange<D> | D | null { return this._selected; }\n  set selected(value: DateRange<D> | D | null) {\n    if (value instanceof DateRange) {\n      this._selected = value;\n    } else {\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n  }\n  private _selected: DateRange<D> | D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Start of the comparison range. */\n  @Input() comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  @Input() comparisonEnd: D | null;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits when the current view changes.\n   */\n  @Output() readonly viewChanged: EventEmitter<MatCalendarView> =\n    new EventEmitter<MatCalendarView>(true);\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<MatCalendarUserEvent<D | null>> =\n      new EventEmitter<MatCalendarUserEvent<D | null>>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n    this._changeDetectorRef.markForCheck();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    const viewChangedResult = this._currentView !== value ? value : null;\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n    this._changeDetectorRef.markForCheck();\n    if (viewChangedResult) {\n      this.viewChanged.emit(viewChangedResult);\n    }\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change =\n        changes['minDate'] || changes['maxDate'] || changes['dateFilter'];\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell(false);\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    const currentView = this.currentView;\n    let view: MatMonthView<D> | MatYearView<D> | MatMultiYearView<D>;\n\n    if (currentView === 'month') {\n      view = this.monthView;\n    } else if (currentView === 'year') {\n      view = this.yearView;\n    } else {\n      view = this.multiYearView;\n    }\n\n    view._init();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(event: MatCalendarUserEvent<D | null>): void {\n    const date = event.value;\n\n    if (this.selected instanceof DateRange ||\n        (date && !this._dateAdapter.sameDate(date, this.selected))) {\n      this.selectedChange.emit(date);\n    }\n\n    this._userSelection.emit(event);\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty, coerceStringArray} from '@angular/cdk/coercion';\nimport {ESCAPE, hasModifierKey, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  FlexibleConnectedPositionStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  Directive,\n  OnChanges,\n  SimpleChanges,\n  OnInit,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Observable, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar, MatCalendarView} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatCalendarUserEvent, MatCalendarCellClassFunction} from './calendar-body';\nimport {DateFilterFn} from './datepicker-input-base';\nimport {\n  ExtractDateTypeFromSelection,\n  MatDateSelectionModel,\n  DateRange,\n} from './date-selection-model';\nimport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  MatDateRangeSelectionStrategy,\n} from './date-range-selection-strategy';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Possible positions for the datepicker dropdown along the X axis. */\nexport type DatepickerDropdownPositionX = 'start' | 'end';\n\n/** Possible positions for the datepicker dropdown along the Y axis. */\nexport type DatepickerDropdownPositionY = 'above' | 'below';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nclass MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nconst _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '_animationState',\n    '(@transformPanel.done)': '_animationDone.next()',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<S, D = ExtractDateTypeFromSelection<S>>\n  extends _MatDatepickerContentMixinBase implements OnInit, AfterViewInit, OnDestroy, CanColor {\n  private _subscriptions = new Subscription();\n  private _model: MatDateSelectionModel<S, D>;\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepickerBase<any, S, D>;\n\n  /** Start of the comparison range. */\n  comparisonStart: D | null;\n\n  /** End of the comparison range. */\n  comparisonEnd: D | null;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  /** Current state of the animation. */\n  _animationState: 'enter' | 'void' = 'enter';\n\n  /** Emits when an animation has finished. */\n  _animationDone = new Subject<void>();\n\n  /** Text for the close button. */\n  _closeButtonText: string;\n\n  /** Whether the close button currently has focus. */\n  _closeButtonFocused: boolean;\n\n  /** Portal with projected action buttons. */\n  _actionsPortal: TemplatePortal | null = null;\n\n  constructor(\n    elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _globalModel: MatDateSelectionModel<S, D>,\n    private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_RANGE_SELECTION_STRATEGY)\n        private _rangeSelectionStrategy: MatDateRangeSelectionStrategy<D>,\n    /**\n     * @deprecated `intl` argument to become required.\n     * @breaking-change 12.0.0\n     */\n    intl?: MatDatepickerIntl) {\n    super(elementRef);\n    // @breaking-change 12.0.0 Remove fallback for `intl`.\n    this._closeButtonText = intl?.closeCalendarLabel || 'Close calendar';\n  }\n\n  ngOnInit() {\n    // If we have actions, clone the model so that we have the ability to cancel the selection,\n    // otherwise update the global model directly. Note that we want to assign this as soon as\n    // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n    this._model = this._actionsPortal ? this._globalModel.clone() : this._globalModel;\n  }\n\n  ngAfterViewInit() {\n    this._subscriptions.add(this.datepicker.stateChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    }));\n    this._calendar.focusActiveCell();\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n    this._animationDone.complete();\n  }\n\n  _handleUserSelection(event: MatCalendarUserEvent<D | null>) {\n    const selection = this._model.selection;\n    const value = event.value;\n    const isRange = selection instanceof DateRange;\n\n    // If we're selecting a range and we have a selection strategy, always pass the value through\n    // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n    // A null value when picking a range means that the user cancelled the selection (e.g. by\n    // pressing escape), whereas when selecting a single value it means that the value didn't\n    // change. This isn't very intuitive, but it's here for backwards-compatibility.\n    if (isRange && this._rangeSelectionStrategy) {\n      const newSelection = this._rangeSelectionStrategy.selectionFinished(value,\n          selection as unknown as DateRange<D>, event.event);\n      this._model.updateSelection(newSelection as unknown as S, this);\n    } else if (value && (isRange ||\n              !this._dateAdapter.sameDate(value, selection as unknown as D))) {\n      this._model.add(value);\n    }\n\n    // Delegate closing the popup to the actions.\n    if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n      this.datepicker.close();\n    }\n  }\n\n  _startExitAnimation() {\n    this._animationState = 'void';\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getSelected() {\n    return this._model.selection as unknown as D | DateRange<D> | null;\n  }\n\n  /** Applies the current pending selection to the global model. */\n  _applyPendingSelection() {\n    if (this._model !== this._globalModel) {\n      this._globalModel.updateSelection(this._model.selection, this);\n    }\n  }\n}\n\n/** Form control that can be associated with a datepicker. */\nexport interface MatDatepickerControl<D> {\n  getStartValue(): D | null;\n  getThemePalette(): ThemePalette;\n  min: D | null;\n  max: D | null;\n  disabled: boolean;\n  dateFilter: DateFilterFn<D>;\n  getConnectedOverlayOrigin(): ElementRef;\n  stateChanges: Observable<void>;\n}\n\n/** A datepicker that can be attached to a {@link MatDatepickerControl}. */\nexport interface MatDatepickerPanel<C extends MatDatepickerControl<D>, S,\n    D = ExtractDateTypeFromSelection<S>> {\n  /** Stream that emits whenever the date picker is closed. */\n  closedStream: EventEmitter<void>;\n  /** Color palette to use on the datepicker's calendar. */\n  color: ThemePalette;\n  /** The input element the datepicker is associated with. */\n  datepickerInput: C;\n  /** Whether the datepicker pop-up should be disabled. */\n  disabled: boolean;\n  /** The id for the datepicker's calendar. */\n  id: string;\n  /** Whether the datepicker is open. */\n  opened: boolean;\n  /** Stream that emits whenever the date picker is opened. */\n  openedStream: EventEmitter<void>;\n  /** Emits when the datepicker's state changes. */\n  stateChanges: Subject<void>;\n  /** Opens the datepicker. */\n  open(): void;\n  /** Register an input with the datepicker. */\n  registerInput(input: C): MatDateSelectionModel<S, D>;\n}\n\n/** Base class for a datepicker. */\n@Directive()\nexport abstract class MatDatepickerBase<C extends MatDatepickerControl<D>, S,\n  D = ExtractDateTypeFromSelection<S>> implements MatDatepickerPanel<C, S, D>, OnDestroy,\n    OnChanges {\n  private _scrollStrategy: () => ScrollStrategy;\n  private _inputStateChanges = Subscription.EMPTY;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this.datepickerInput ?\n        this.datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this.stateChanges.next(undefined);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Preferred position of the datepicker in the X axis. */\n  @Input()\n  xPosition: DatepickerDropdownPositionX = 'start';\n\n  /** Preferred position of the datepicker in the Y axis. */\n  @Input()\n  yPosition: DatepickerDropdownPositionY = 'below';\n\n  /**\n   * Whether to restore focus to the previously-focused element when the calendar is closed.\n   * Note that automatic focus restoration is an accessibility feature and it is recommended that\n   * you provide your own equivalent, if you decide to turn it off.\n   */\n  @Input()\n  get restoreFocus(): boolean { return this._restoreFocus; }\n  set restoreFocus(value: boolean) {\n    this._restoreFocus = coerceBooleanProperty(value);\n  }\n  private _restoreFocus = true;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits when the current view changes.\n   */\n  @Output() readonly viewChanged: EventEmitter<MatCalendarView> =\n    new EventEmitter<MatCalendarView>(true);\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: MatCalendarCellClassFunction<D>;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Classes to be passed to the date picker panel.\n   * Supports string and string array values, similar to `ngClass`.\n   */\n  @Input()\n  get panelClass(): string | string[] { return this._panelClass; }\n  set panelClass(value: string | string[]) {\n    this._panelClass = coerceStringArray(value);\n  }\n  private _panelClass: string[];\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) {\n    coerceBooleanProperty(value) ? this.open() : this.close();\n  }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The minimum selectable date. */\n  _getMinDate(): D | null {\n    return this.datepickerInput && this.datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  _getMaxDate(): D | null {\n    return this.datepickerInput && this.datepickerInput.max;\n  }\n\n  _getDateFilter(): DateFilterFn<D> {\n    return this.datepickerInput && this.datepickerInput.dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef | null;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<S, D>> | null;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<S, D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n  private _backdropHarnessClass = `${this.id}-backdrop`;\n\n  /** Currently-registered actions portal. */\n  private _actionsPortal: TemplatePortal | null;\n\n  /** The input element this datepicker is associated with. */\n  datepickerInput: C;\n\n  /** Emits when the datepicker's state changes. */\n  readonly stateChanges = new Subject<void>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              private _model: MatDateSelectionModel<S, D>) {\n    if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const positionChange = changes['xPosition'] || changes['yPosition'];\n\n    if (positionChange && !positionChange.firstChange && this._popupRef) {\n      this._setConnectedPositions(\n          this._popupRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n\n      if (this.opened) {\n        this._popupRef.updatePosition();\n      }\n    }\n\n    this.stateChanges.next(undefined);\n  }\n\n  ngOnDestroy() {\n    this._destroyPopup();\n    this.close();\n    this._inputStateChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    this._model.add(date);\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /** Emits changed view */\n  _viewChanged(view: MatCalendarView): void {\n    this.viewChanged.emit(view);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   * @returns Selection model that the input should hook itself up to.\n   */\n  registerInput(input: C): MatDateSelectionModel<S, D> {\n    if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._inputStateChanges.unsubscribe();\n    this.datepickerInput = input;\n    this._inputStateChanges =\n        input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n    return this._model;\n  }\n\n  /**\n   * Registers a portal containing action buttons with the datepicker.\n   * @param portal Portal to be registered.\n   */\n  registerActions(portal: TemplatePortal): void {\n    if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('A MatDatepicker can only be associated with a single actions row.');\n    }\n    this._actionsPortal = portal;\n  }\n\n  /**\n   * Removes a portal containing action buttons from the datepicker.\n   * @param portal Portal to be removed.\n   */\n  removeActions(portal: TemplatePortal): void {\n    if (portal === this._actionsPortal) {\n      this._actionsPortal = null;\n    }\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupComponentRef && this._popupRef) {\n      const instance = this._popupComponentRef.instance;\n      instance._startExitAnimation();\n      instance._animationDone.pipe(take(1)).subscribe(() => this._destroyPopup());\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._restoreFocus && this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Applies the current pending selection on the popup to the model. */\n  _applyPendingSelection() {\n    const instance = this._popupComponentRef?.instance || this._dialogRef?.componentInstance;\n    instance?._applyPendingSelection();\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<S, D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n\n      // These values are all the same as the defaults, but we set them explicitly so that the\n      // datepicker dialog behaves consistently even if the user changed the defaults.\n      hasBackdrop: true,\n      disableClose: false,\n      backdropClass: ['cdk-overlay-dark-backdrop', this._backdropHarnessClass],\n      width: '',\n      height: '',\n      minWidth: '',\n      minHeight: '',\n      maxWidth: '80vw',\n      maxHeight: '',\n      position: {},\n\n      // Disable the dialog's automatic focus capturing, because it'll go to the close button\n      // automatically. The calendar will move focus on its own once it renders.\n      autoFocus: false,\n\n      // `MatDialog` has focus restoration built in, however we want to disable it since the\n      // datepicker also has focus restoration for dropdown mode. We want to do this, in order\n      // to ensure that the timing is consistent between dropdown and dialog modes since `MatDialog`\n      // restores focus when the animation is finished, but the datepicker does it immediately.\n      // Furthermore, this avoids any conflicts where the datepicker consumer might move focus\n      // inside the `closed` event which is dispatched immediately.\n      restoreFocus: false\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._forwardContentValues(this._dialogRef.componentInstance);\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    const portal = new ComponentPortal<MatDatepickerContent<S, D>>(MatDatepickerContent,\n                                                                   this._viewContainerRef);\n\n    this._destroyPopup();\n    this._createPopup();\n    this._popupComponentRef = this._popupRef!.attach(portal);\n    this._forwardContentValues(this._popupComponentRef.instance);\n\n    // Update the position once the calendar has rendered.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._popupRef!.updatePosition();\n    });\n  }\n\n  /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n  protected _forwardContentValues(instance: MatDatepickerContent<S, D>) {\n    instance.datepicker = this;\n    instance.color = this.color;\n    instance._actionsPortal = this._actionsPortal;\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition();\n\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._setConnectedPositions(positionStrategy),\n      hasBackdrop: true,\n      backdropClass: ['mat-overlay-transparent-backdrop', this._backdropHarnessClass],\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return (event.keyCode === ESCAPE && !hasModifierKey(event)) || (this.datepickerInput &&\n            hasModifierKey(event, 'altKey') && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.close();\n    });\n  }\n\n  /** Destroys the current popup overlay. */\n  private _destroyPopup() {\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupRef = this._popupComponentRef = null;\n    }\n  }\n\n  /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n  private _setConnectedPositions(strategy: FlexibleConnectedPositionStrategy) {\n    const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n    const secondaryX = primaryX === 'start' ? 'end' : 'start';\n    const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n    const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n\n    return strategy.withPositions([\n      {\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY\n      },\n      {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY\n      },\n      {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY\n      },\n      {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY\n      }\n    ]);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_opened: BooleanInput;\n  static ngAcceptInputType_touchUi: BooleanInput;\n  static ngAcceptInputType_restoreFocus: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase, MatDatepickerControl} from './datepicker-base';\nimport {MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER} from './date-selection-model';\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\n    {provide: MatDatepickerBase, useExisting: MatDatepicker},\n  ]\n})\nexport class MatDatepicker<D> extends MatDatepickerBase<MatDatepickerControl<D>, D | null, D> {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  AfterViewInit,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n} from '@angular/material/core';\nimport {Subscription, Subject} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {\n  ExtractDateTypeFromSelection,\n  MatDateSelectionModel,\n  DateSelectionModelChange,\n} from './date-selection-model';\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D, S = unknown> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n      /** Reference to the datepicker input component that emitted the event. */\n      public target: MatDatepickerInputBase<S, D>,\n      /** Reference to the native input element associated with the datepicker input. */\n      public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n/** Function that can be used to filter out dates from a calendar. */\nexport type DateFilterFn<D> = (date: D | null) => boolean;\n\n/** Base class for datepicker inputs. */\n@Directive()\nexport abstract class MatDatepickerInputBase<S, D = ExtractDateTypeFromSelection<S>>\n  implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy, Validator {\n\n  /** Whether the component has been initialized. */\n  private _isInitialized: boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n  }\n  set value(value: D | null) {\n    this._assignValueProgrammatically(value);\n  }\n  protected _model: MatDateSelectionModel<S, D> | undefined;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled || this._parentDisabled(); }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this.stateChanges.next(undefined);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n    // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n    // element has been inserted.\n    if (newValue && this._isInitialized && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D, S>> =\n      new EventEmitter<MatDatepickerInputEvent<D, S>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D, S>> =\n      new EventEmitter<MatDatepickerInputEvent<D, S>>();\n\n  /** Emits when the internal state has changed */\n  stateChanges = new Subject<void>();\n\n  _onTouched = () => {};\n  _validatorOnChange = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n  private _valueChangesSubscription = Subscription.EMPTY;\n  private _localeSubscription = Subscription.EMPTY;\n\n  /**\n   * Since the value is kept on the model which is assigned in an Input,\n   * we might get a value before we have a model. This property keeps track\n   * of the value until we have somewhere to assign it.\n   */\n  private _pendingValue: D | null;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value));\n    return !controlValue || this._matchesFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value));\n    const min = this._getMinDate();\n    return (!min || !controlValue ||\n        this._dateAdapter.compareDate(min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value));\n    const max = this._getMaxDate();\n    return (!max || !controlValue ||\n        this._dateAdapter.compareDate(max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': max, 'actual': controlValue}};\n  }\n\n  /** Gets the base validator functions. */\n  protected _getValidators(): ValidatorFn[] {\n    return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n  }\n\n  /** Gets the minimum date for the input. Used for validation. */\n  abstract _getMinDate(): D | null;\n\n  /** Gets the maximum date for the input. Used for validation. */\n  abstract _getMaxDate(): D | null;\n\n  /** Gets the date filter function. Used for validation. */\n  protected abstract _getDateFilter(): DateFilterFn<D> | undefined;\n\n  /** Registers a date selection model with the input. */\n  _registerModel(model: MatDateSelectionModel<S, D>): void {\n    this._model = model;\n    this._valueChangesSubscription.unsubscribe();\n\n    if (this._pendingValue) {\n      this._assignValue(this._pendingValue);\n    }\n\n    this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n      if (this._shouldHandleChangeEvent(event)) {\n        const value = this._getValueFromModel(event.selection);\n        this._lastValueValid = this._isValidValue(value);\n        this._cvaOnChange(value);\n        this._onTouched();\n        this._formatValue(value);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      }\n    });\n  }\n\n  /** Opens the popup associated with the input. */\n  protected abstract _openPopup(): void;\n\n  /** Assigns a value to the input's model. */\n  protected abstract _assignValueToModel(model: D | null): void;\n\n  /** Converts a value from the model into a native value for the input. */\n  protected abstract _getValueFromModel(modelValue: S): D | null;\n\n  /** Combined form control validator for this input. */\n  protected abstract _validator: ValidatorFn | null;\n\n  /** Predicate that determines whether the input should handle a particular change event. */\n  protected abstract _shouldHandleChangeEvent(event: DateSelectionModelChange<S>): boolean;\n\n  /** Whether the last value set on the input was valid. */\n  protected _lastValueValid = false;\n\n  constructor(\n      protected _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats) {\n\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._dateAdapter) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      if (!this._dateFormats) {\n        throw createMissingDateImplError('MAT_DATE_FORMATS');\n      }\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this._assignValueProgrammatically(this.value);\n    });\n  }\n\n  ngAfterViewInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n      this.stateChanges.next(undefined);\n    }\n  }\n\n  ngOnDestroy() {\n    this._valueChangesSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this._assignValueProgrammatically(value);\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._openPopup();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    const lastValueWasValid = this._lastValueValid;\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = this._isValidValue(date);\n    date = this._dateAdapter.getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this.value)) {\n      this._assignValue(date);\n      this._cvaOnChange(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    } else {\n      // Call the CVA change handler for invalid values\n      // since this is what marks the control as dirty.\n      if (value && !this.value) {\n        this._cvaOnChange(date);\n      }\n\n      if (lastValueWasValid !== this._lastValueValid) {\n        this._validatorOnChange();\n      }\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  protected _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /** Assigns a value to the model. */\n  private _assignValue(value: D | null) {\n    // We may get some incoming values before the model was\n    // assigned. Save the value so that we can assign it later.\n    if (this._model) {\n      this._assignValueToModel(value);\n      this._pendingValue = null;\n    } else {\n      this._pendingValue = value;\n    }\n  }\n\n  /** Whether a value is considered valid. */\n  private _isValidValue(value: D | null): boolean {\n    return !value || this._dateAdapter.isValid(value);\n  }\n\n  /**\n   * Checks whether a parent control is disabled. This is in place so that it can be overridden\n   * by inputs extending this one which can be placed inside of a group that can be disabled.\n   */\n  protected _parentDisabled() {\n    return false;\n  }\n\n  /** Programmatically assigns a value to the input. */\n  protected _assignValueProgrammatically(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = this._isValidValue(value);\n    value = this._dateAdapter.getValidDateOrNull(value);\n    this._assignValue(value);\n    this._formatValue(value);\n  }\n\n  /** Gets whether a value matches the current date filter. */\n  _matchesFilter(value: D | null): boolean {\n    const filter = this._getDateFilter();\n    return !filter || filter(value);\n  }\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that\n  // may accept different types.\n  static ngAcceptInputType_value: any;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nexport function dateInputsHaveChanged(\n  changes: SimpleChanges,\n  adapter: DateAdapter<unknown>): boolean {\n  const keys = Object.keys(changes);\n\n  for (let key of keys) {\n    const {previousValue, currentValue} = changes[key];\n\n    if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n      if (!adapter.sameDate(previousValue, currentValue)) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n} from '@angular/core';\nimport {\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MatDateFormats,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepickerInputBase, DateFilterFn} from './datepicker-input-base';\nimport {MatDatepickerControl, MatDatepickerPanel} from './datepicker-base';\nimport {DateSelectionModelChange} from './date-selection-model';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    'class': 'mat-datepicker-input',\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    // Used by the test harness to tie this input to its calendar. We can't depend on\n    // `aria-owns` for this, because it's only defined while the calendar is open.\n    '[attr.data-mat-calendar]': '_datepicker ? _datepicker.id : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> extends MatDatepickerInputBase<D | null, D>\n  implements MatDatepickerControl<D | null>, OnDestroy {\n  private _closedSubscription = Subscription.EMPTY;\n\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(datepicker: MatDatepickerPanel<MatDatepickerControl<D>, D | null, D>) {\n    if (datepicker) {\n      this._datepicker = datepicker;\n      this._closedSubscription = datepicker.closedStream.subscribe(() => this._onTouched());\n      this._registerModel(datepicker.registerInput(this));\n    }\n  }\n  _datepicker: MatDatepickerPanel<MatDatepickerControl<D>, D | null, D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\n      this._min = validValue;\n      this._validatorOnChange();\n    }\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\n      this._max = validValue;\n      this._validatorOnChange();\n    }\n  }\n  private _max: D | null;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input('matDatepickerFilter')\n  get dateFilter() { return this._dateFilter; }\n  set dateFilter(value: DateFilterFn<D | null>) {\n    const wasMatchingValue = this._matchesFilter(this.value);\n    this._dateFilter = value;\n\n    if (this._matchesFilter(this.value) !== wasMatchingValue) {\n      this._validatorOnChange();\n    }\n  }\n  private _dateFilter: DateFilterFn<D | null>;\n\n  /** The combined form control validator for this input. */\n  protected _validator: ValidatorFn | null;\n\n  constructor(\n      elementRef: ElementRef<HTMLInputElement>,\n      @Optional() dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats,\n      @Optional() @Inject(MAT_FORM_FIELD) private _formField: MatFormField) {\n    super(elementRef, dateAdapter, dateFormats);\n    this._validator = Validators.compose(super._getValidators());\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the value at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value;\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._closedSubscription.unsubscribe();\n  }\n\n  /** Opens the associated datepicker. */\n  protected _openPopup(): void {\n    if (this._datepicker) {\n      this._datepicker.open();\n    }\n  }\n\n  protected _getValueFromModel(modelValue: D | null): D | null {\n    return modelValue;\n  }\n\n  protected _assignValueToModel(value: D | null): void {\n    if (this._model) {\n      this._model.updateSelection(value, this);\n    }\n  }\n\n  /** Gets the input's minimum date. */\n  _getMinDate() {\n    return this._min;\n  }\n\n  /** Gets the input's maximum date. */\n  _getMaxDate() {\n    return this._max;\n  }\n\n  /** Gets the input's date filtering function. */\n  protected _getDateFilter() {\n    return this._dateFilter;\n  }\n\n  protected _shouldHandleChangeEvent(event: DateSelectionModelChange<D>) {\n    return event.source !== this;\n  }\n\n  // Accept `any` to avoid conflicts with other directives on `<input>` that\n  // may accept different types.\n  static ngAcceptInputType_value: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerControl, MatDatepickerPanel} from './datepicker-base';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[attr.tabindex]': 'null',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    // Used by the test harness to tie this toggle to its datepicker.\n    '[attr.data-mat-calendar]': 'datepicker ? datepicker.id : null',\n    // Bind the `click` on the host, rather than the inner `button`, so that we can call\n    // `stopPropagation` on it without affecting the user's `click` handlers. We need to stop\n    // it so that the input doesn't get focused automatically by the form field (See #21836).\n    '(click)': '_open($event)',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepickerPanel<MatDatepickerControl<any>, D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this._disabled === undefined && this.datepicker) {\n      return this.datepicker.disabled;\n    }\n\n    return !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['datepicker']) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : observableOf();\n    const inputStateChanged = this.datepicker && this.datepicker.datepickerInput ?\n        this.datepicker.datepickerInput.stateChanges : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerStateChanged,\n      inputStateChanged,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Optional,\n  InjectionToken,\n  Inject,\n  OnInit,\n  Injector,\n  InjectFlags,\n  DoCheck,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  NG_VALIDATORS,\n  NgForm,\n  FormGroupDirective,\n  NgControl,\n  ValidatorFn,\n  Validators,\n  AbstractControl,\n  ValidationErrors,\n} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  mixinErrorState,\n  MAT_DATE_FORMATS,\n  DateAdapter,\n  MatDateFormats,\n  ErrorStateMatcher,\n} from '@angular/material/core';\nimport {BooleanInput} from '@angular/cdk/coercion';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {MatDatepickerInputBase, DateFilterFn} from './datepicker-input-base';\nimport {DateRange, DateSelectionModelChange} from './date-selection-model';\n\n/** Parent component that should be wrapped around `MatStartDate` and `MatEndDate`. */\nexport interface MatDateRangeInputParent<D> {\n  id: string;\n  min: D | null;\n  max: D | null;\n  dateFilter: DateFilterFn<D>;\n  rangePicker: {\n    opened: boolean;\n    id: string;\n  };\n  _startInput: MatDateRangeInputPartBase<D>;\n  _endInput: MatDateRangeInputPartBase<D>;\n  _groupDisabled: boolean;\n  _handleChildValueChange(): void;\n  _openDatepicker(): void;\n}\n\n/**\n * Used to provide the date range input wrapper component\n * to the parts without circular dependencies.\n */\nexport const MAT_DATE_RANGE_INPUT_PARENT =\n    new InjectionToken<MatDateRangeInputParent<unknown>>('MAT_DATE_RANGE_INPUT_PARENT');\n\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\n@Directive()\nabstract class MatDateRangeInputPartBase<D>\n  extends MatDatepickerInputBase<DateRange<D>> implements OnInit, DoCheck {\n\n  /** @docs-private */\n  ngControl: NgControl;\n\n  /** @docs-private */\n  abstract updateErrorState(): void;\n\n  protected abstract _validator: ValidatorFn | null;\n  protected abstract _assignValueToModel(value: D | null): void;\n  protected abstract _getValueFromModel(modelValue: DateRange<D>): D | null;\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) public _rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    public _defaultErrorStateMatcher: ErrorStateMatcher,\n    private _injector: Injector,\n    @Optional() public _parentForm: NgForm,\n    @Optional() public _parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n    super(elementRef, dateAdapter, dateFormats);\n  }\n\n  ngOnInit() {\n    // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n    // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n    // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n    // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n    // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n    // everything has been resolved.\n    const ngControl = this._injector.get(NgControl, null, InjectFlags.Self);\n\n    if (ngControl) {\n      this.ngControl = ngControl;\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  /** Gets whether the input is empty. */\n  isEmpty(): boolean {\n    return this._elementRef.nativeElement.value.length === 0;\n  }\n\n  /** Gets the placeholder of the input. */\n  _getPlaceholder() {\n    return this._elementRef.nativeElement.placeholder;\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Handles `input` events on the input element. */\n  _onInput(value: string) {\n    super._onInput(value);\n    this._rangeInput._handleChildValueChange();\n  }\n\n  /** Opens the datepicker associated with the input. */\n  protected _openPopup(): void {\n    this._rangeInput._openDatepicker();\n  }\n\n  /** Gets the minimum date from the range input. */\n  _getMinDate() {\n    return this._rangeInput.min;\n  }\n\n  /** Gets the maximum date from the range input. */\n  _getMaxDate() {\n    return this._rangeInput.max;\n  }\n\n  /** Gets the date filter function from the range input. */\n  protected _getDateFilter() {\n    return this._rangeInput.dateFilter;\n  }\n\n  protected _parentDisabled() {\n    return this._rangeInput._groupDisabled;\n  }\n\n  protected _shouldHandleChangeEvent({source}: DateSelectionModelChange<DateRange<D>>): boolean {\n    return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\n  }\n\n  protected _assignValueProgrammatically(value: D | null) {\n    super._assignValueProgrammatically(value);\n    const opposite = (this === this._rangeInput._startInput ? this._rangeInput._endInput :\n        this._rangeInput._startInput) as MatDateRangeInputPartBase<D> | undefined;\n    opposite?._validatorOnChange();\n  }\n}\n\nconst _MatDateRangeInputBase:\n    CanUpdateErrorStateCtor & typeof MatDateRangeInputPartBase =\n    // Needs to be `as any`, because the base class is abstract.\n    mixinErrorState(MatDateRangeInputPartBase as any);\n\n/** Input for entering the start date in a `mat-date-range-input`. */\n@Directive({\n  selector: 'input[matStartDate]',\n  host: {\n    'class': 'mat-start-date mat-date-range-input-inner',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(keydown)': '_onKeydown($event)',\n    '[attr.id]': '_rangeInput.id',\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n    '(blur)': '_onBlur()',\n    'type': 'text',\n  },\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting: MatStartDate, multi: true},\n    {provide: NG_VALIDATORS, useExisting: MatStartDate, multi: true}\n  ],\n  // These need to be specified explicitly, because some tooling doesn't\n  // seem to pick them up from the base class. See #20932.\n  outputs: ['dateChange', 'dateInput'],\n  inputs: ['errorStateMatcher']\n})\nexport class MatStartDate<D> extends _MatDateRangeInputBase<D> implements\n    CanUpdateErrorState, DoCheck, OnInit {\n  /** Validator that checks that the start date isn't after the end date. */\n  private _startValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const start = this._dateAdapter.getValidDateOrNull(\n      this._dateAdapter.deserialize(control.value));\n    const end = this._model ? this._model.selection.end : null;\n    return (!start || !end ||\n        this._dateAdapter.compareDate(start, end) <= 0) ?\n        null : {'matStartDateInvalid': {'end': end, 'actual': start}};\n  }\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    injector: Injector,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup,\n        dateAdapter, dateFormats);\n  }\n\n  ngOnInit() {\n    // Normally this happens automatically, but it seems to break if not added explicitly when all\n    // of the criteria below are met:\n    // 1) The class extends a TS mixin.\n    // 2) The application is running in ViewEngine.\n    // 3) The application is being transpiled through tsickle.\n    // This can be removed once google3 is completely migrated to Ivy.\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    // Normally this happens automatically, but it seems to break if not added explicitly when all\n    // of the criteria below are met:\n    // 1) The class extends a TS mixin.\n    // 2) The application is running in ViewEngine.\n    // 3) The application is being transpiled through tsickle.\n    // This can be removed once google3 is completely migrated to Ivy.\n    super.ngDoCheck();\n  }\n\n  protected _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n\n  protected _getValueFromModel(modelValue: DateRange<D>) {\n    return modelValue.start;\n  }\n\n  protected _assignValueToModel(value: D | null) {\n    if (this._model) {\n      const range = new DateRange(value, this._model.selection.end);\n      this._model.updateSelection(range, this);\n    }\n  }\n\n  protected _formatValue(value: D | null) {\n    super._formatValue(value);\n\n    // Any time the input value is reformatted we need to tell the parent.\n    this._rangeInput._handleChildValueChange();\n  }\n\n  /** Gets the value that should be used when mirroring the input's size. */\n  getMirrorValue(): string {\n    const element = this._elementRef.nativeElement;\n    const value = element.value;\n    return value.length > 0 ? value : element.placeholder;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n\n/** Input for entering the end date in a `mat-date-range-input`. */\n@Directive({\n  selector: 'input[matEndDate]',\n  host: {\n    'class': 'mat-end-date mat-date-range-input-inner',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(keydown)': '_onKeydown($event)',\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\n    '(blur)': '_onBlur()',\n    'type': 'text',\n  },\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting: MatEndDate, multi: true},\n    {provide: NG_VALIDATORS, useExisting: MatEndDate, multi: true}\n  ],\n  // These need to be specified explicitly, because some tooling doesn't\n  // seem to pick them up from the base class. See #20932.\n  outputs: ['dateChange', 'dateInput'],\n  inputs: ['errorStateMatcher']\n})\nexport class MatEndDate<D> extends _MatDateRangeInputBase<D> implements\n    CanUpdateErrorState, DoCheck, OnInit {\n  /** Validator that checks that the end date isn't before the start date. */\n  private _endValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    const start = this._model ? this._model.selection.start : null;\n    return (!end || !start ||\n        this._dateAdapter.compareDate(end, start) >= 0) ?\n        null : {'matEndDateInvalid': {'start': start, 'actual': end}};\n  }\n\n  constructor(\n    @Inject(MAT_DATE_RANGE_INPUT_PARENT) rangeInput: MatDateRangeInputParent<D>,\n    elementRef: ElementRef<HTMLInputElement>,\n    defaultErrorStateMatcher: ErrorStateMatcher,\n    injector: Injector,\n    @Optional() parentForm: NgForm,\n    @Optional() parentFormGroup: FormGroupDirective,\n    @Optional() dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_DATE_FORMATS) dateFormats: MatDateFormats) {\n\n    // TODO(crisbeto): this constructor shouldn't be necessary, but ViewEngine doesn't seem to\n    // handle DI correctly when it is inherited from `MatDateRangeInputPartBase`. We can drop this\n    // constructor once ViewEngine is removed.\n    super(rangeInput, elementRef, defaultErrorStateMatcher, injector, parentForm, parentFormGroup,\n        dateAdapter, dateFormats);\n  }\n\n  ngOnInit() {\n    // Normally this happens automatically, but it seems to break if not added explicitly when all\n    // of the criteria below are met:\n    // 1) The class extends a TS mixin.\n    // 2) The application is running in ViewEngine.\n    // 3) The application is being transpiled through tsickle.\n    // This can be removed once google3 is completely migrated to Ivy.\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    // Normally this happens automatically, but it seems to break if not added explicitly when all\n    // of the criteria below are met:\n    // 1) The class extends a TS mixin.\n    // 2) The application is running in ViewEngine.\n    // 3) The application is being transpiled through tsickle.\n    // This can be removed once google3 is completely migrated to Ivy.\n    super.ngDoCheck();\n  }\n\n  protected _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n\n  protected _getValueFromModel(modelValue: DateRange<D>) {\n    return modelValue.end;\n  }\n\n  protected _assignValueToModel(value: D | null) {\n    if (this._model) {\n      const range = new DateRange(this._model.selection.start, value);\n      this._model.updateSelection(range, this);\n    }\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    // If the user is pressing backspace on an empty end input, move focus back to the start.\n    if (event.keyCode === BACKSPACE && !this._elementRef.nativeElement.value) {\n      this._rangeInput._startInput.focus();\n    }\n\n    super._onKeydown(event);\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Input,\n  Optional,\n  OnDestroy,\n  ContentChild,\n  AfterContentInit,\n  ChangeDetectorRef,\n  Self,\n  ElementRef,\n  Inject,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport {MatFormFieldControl, MatFormField, MAT_FORM_FIELD} from '@angular/material/form-field';\nimport {ThemePalette, DateAdapter} from '@angular/material/core';\nimport {NgControl, ControlContainer} from '@angular/forms';\nimport {Subject, merge, Subscription} from 'rxjs';\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  MatStartDate,\n  MatEndDate,\n  MatDateRangeInputParent,\n  MAT_DATE_RANGE_INPUT_PARENT,\n} from './date-range-input-parts';\nimport {MatDatepickerControl, MatDatepickerPanel} from './datepicker-base';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {DateFilterFn, dateInputsHaveChanged} from './datepicker-input-base';\nimport {MatDateRangePickerInput} from './date-range-picker';\nimport {DateRange, MatDateSelectionModel} from './date-selection-model';\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mat-date-range-input',\n  templateUrl: 'date-range-input.html',\n  styleUrls: ['date-range-input.css'],\n  exportAs: 'matDateRangeInput',\n  host: {\n    'class': 'mat-date-range-input',\n    '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\n    '[class.mat-date-range-input-required]': 'required',\n    '[attr.id]': 'null',\n    'role': 'group',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-describedby]': '_ariaDescribedBy',\n    // Used by the test harness to tie this input to its calendar. We can't depend on\n    // `aria-owns` for this, because it's only defined while the calendar is open.\n    '[attr.data-mat-calendar]': 'rangePicker ? rangePicker.id : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatDateRangeInput},\n    {provide: MAT_DATE_RANGE_INPUT_PARENT, useExisting: MatDateRangeInput},\n  ]\n})\nexport class MatDateRangeInput<D> implements MatFormFieldControl<DateRange<D>>,\n  MatDatepickerControl<D>, MatDateRangeInputParent<D>, MatDateRangePickerInput<D>,\n  AfterContentInit, OnChanges, OnDestroy {\n  private _closedSubscription = Subscription.EMPTY;\n\n  /** Current value of the range input. */\n  get value() {\n    return this._model ? this._model.selection : null;\n  }\n\n  /** Unique ID for the input. */\n  id = `mat-date-range-input-${nextUniqueId++}`;\n\n  /** Whether the control is focused. */\n  focused = false;\n\n  /** Whether the control's label should float. */\n  get shouldLabelFloat(): boolean {\n    return this.focused || !this.empty;\n  }\n\n  /** Name of the form control. */\n  controlType = 'mat-date-range-input';\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n   * @docs-private\n   */\n  get placeholder() {\n    const start = this._startInput?._getPlaceholder() || '';\n    const end = this._endInput?._getPlaceholder() || '';\n    return (start || end) ? `${start} ${this.separator} ${end}` : '';\n  }\n\n  /** The range picker that this input is associated with. */\n  @Input()\n  get rangePicker() { return this._rangePicker; }\n  set rangePicker(rangePicker: MatDatepickerPanel<MatDatepickerControl<D>, DateRange<D>, D>) {\n    if (rangePicker) {\n      this._model = rangePicker.registerInput(this);\n      this._rangePicker = rangePicker;\n      this._closedSubscription.unsubscribe();\n      this._closedSubscription = rangePicker.closedStream.subscribe(() => {\n        this._startInput?._onTouched();\n        this._endInput?._onTouched();\n      });\n      this._registerModel(this._model!);\n    }\n  }\n  private _rangePicker: MatDatepickerPanel<MatDatepickerControl<D>, DateRange<D>, D>;\n\n  /** Whether the input is required. */\n  @Input()\n  get required(): boolean { return !!this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n  private _required: boolean;\n\n  /** Function that can be used to filter out dates within the date range picker. */\n  @Input()\n  get dateFilter() { return this._dateFilter; }\n  set dateFilter(value: DateFilterFn<D>) {\n    const start = this._startInput;\n    const end = this._endInput;\n    const wasMatchingStart = start && start._matchesFilter(start.value);\n    const wasMatchingEnd = end && end._matchesFilter(start.value);\n    this._dateFilter = value;\n\n    if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\n      start._validatorOnChange();\n    }\n\n    if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\n      end._validatorOnChange();\n    }\n  }\n  private _dateFilter: DateFilterFn<D>;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\n      this._min = validValue;\n      this._revalidate();\n    }\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\n      this._max = validValue;\n      this._revalidate();\n    }\n  }\n  private _max: D | null;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return (this._startInput && this._endInput) ?\n      (this._startInput.disabled && this._endInput.disabled) :\n      this._groupDisabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._groupDisabled) {\n      this._groupDisabled = newValue;\n      this.stateChanges.next(undefined);\n    }\n  }\n  _groupDisabled = false;\n\n  /** Whether the input is in an error state. */\n  get errorState(): boolean {\n    if (this._startInput && this._endInput) {\n      return this._startInput.errorState || this._endInput.errorState;\n    }\n\n    return false;\n  }\n\n  /** Whether the datepicker input is empty. */\n  get empty(): boolean {\n    const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n    const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n    return startEmpty && endEmpty;\n  }\n\n  /** Value for the `aria-describedby` attribute of the inputs. */\n  _ariaDescribedBy: string | null = null;\n\n  /** Date selection model currently registered with the input. */\n  private _model: MatDateSelectionModel<DateRange<D>> | undefined;\n\n  /** Separator text to be shown between the inputs. */\n  @Input() separator = '–';\n\n  /** Start of the comparison range that should be shown in the calendar. */\n  @Input() comparisonStart: D | null = null;\n\n  /** End of the comparison range that should be shown in the calendar. */\n  @Input() comparisonEnd: D | null = null;\n\n  @ContentChild(MatStartDate) _startInput: MatStartDate<D>;\n  @ContentChild(MatEndDate) _endInput: MatEndDate<D>;\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n   * @docs-private\n   */\n  ngControl: NgControl | null;\n\n  /** Emits when the input's state has changed. */\n  stateChanges = new Subject<void>();\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Optional() @Self() control: ControlContainer,\n    @Optional() private _dateAdapter: DateAdapter<D>,\n    @Optional() @Inject(MAT_FORM_FIELD) private _formField?: MatFormField) {\n\n    if (!_dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    // TODO(crisbeto): remove `as any` after #18206 lands.\n    this.ngControl = control as any;\n  }\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]): void {\n    this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n  }\n\n  /**\n   * Implemented as a part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  onContainerClick(): void {\n    if (!this.focused && !this.disabled) {\n      if (!this._model || !this._model.selection.start) {\n        this._startInput.focus();\n      } else {\n        this._endInput.focus();\n      }\n    }\n  }\n\n  ngAfterContentInit() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!this._startInput) {\n        throw Error('mat-date-range-input must contain a matStartDate input');\n      }\n\n      if (!this._endInput) {\n        throw Error('mat-date-range-input must contain a matEndDate input');\n      }\n    }\n\n    if (this._model) {\n      this._registerModel(this._model);\n    }\n\n    // We don't need to unsubscribe from this, because we\n    // know that the input streams will be completed on destroy.\n    merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\n      this.stateChanges.next(undefined);\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n      this.stateChanges.next(undefined);\n    }\n  }\n\n  ngOnDestroy() {\n    this._closedSubscription.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  /** Gets the date at which the calendar should start. */\n  getStartValue(): D | null {\n    return this.value ? this.value.start : null;\n  }\n\n  /** Gets the input's theme palette. */\n  getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Gets the element to which the calendar overlay should be attached. */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  /** Gets the value that is used to mirror the state input. */\n  _getInputMirrorValue() {\n    return this._startInput ? this._startInput.getMirrorValue() : '';\n  }\n\n  /** Whether the input placeholders should be hidden. */\n  _shouldHidePlaceholders() {\n    return this._startInput ? !this._startInput.isEmpty() : false;\n  }\n\n  /** Handles the value in one of the child inputs changing. */\n  _handleChildValueChange() {\n    this.stateChanges.next(undefined);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Opens the date range picker associated with the input. */\n  _openDatepicker() {\n    if (this._rangePicker) {\n      this._rangePicker.open();\n    }\n  }\n\n  /** Whether the separate text should be hidden. */\n  _shouldHideSeparator() {\n    return (!this._formField || this._formField._hideControlPlaceholder()) && this.empty;\n  }\n\n  /** Gets the value for the `aria-labelledby` attribute of the inputs. */\n  _getAriaLabelledby() {\n    const formField = this._formField;\n    return formField && formField._hasFloatingLabel() ? formField._labelId : null;\n  }\n\n  /** Re-runs the validators on the start/end inputs. */\n  private _revalidate() {\n    if (this._startInput) {\n      this._startInput._validatorOnChange();\n    }\n\n    if (this._endInput) {\n      this._endInput._validatorOnChange();\n    }\n  }\n\n  /** Registers the current date selection model with the start/end inputs. */\n  private _registerModel(model: MatDateSelectionModel<DateRange<D>>) {\n    if (this._startInput) {\n      this._startInput._registerModel(model);\n    }\n\n    if (this._endInput) {\n      this._endInput._registerModel(model);\n    }\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {MatDatepickerBase, MatDatepickerContent, MatDatepickerControl} from './datepicker-base';\nimport {MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, DateRange} from './date-selection-model';\nimport {MAT_CALENDAR_RANGE_STRATEGY_PROVIDER} from './date-range-selection-strategy';\n\n/**\n * Input that can be associated with a date range picker.\n * @docs-private\n */\nexport interface MatDateRangePickerInput<D> extends MatDatepickerControl<D> {\n  comparisonStart: D|null;\n  comparisonEnd: D|null;\n}\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\n@Component({\n  selector: 'mat-date-range-picker',\n  template: '',\n  exportAs: 'matDateRangePicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER,\n    MAT_CALENDAR_RANGE_STRATEGY_PROVIDER,\n    {provide: MatDatepickerBase, useExisting: MatDateRangePicker},\n  ]\n})\nexport class MatDateRangePicker<D> extends MatDatepickerBase<MatDateRangePickerInput<D>,\n  DateRange<D>, D> {\n  protected _forwardContentValues(instance: MatDatepickerContent<DateRange<D>, D>) {\n    super._forwardContentValues(instance);\n\n    const input = this.datepickerInput;\n\n    if (input) {\n      instance.comparisonStart = input.comparisonStart;\n      instance.comparisonEnd = input.comparisonEnd;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  OnDestroy,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {MatDatepickerBase, MatDatepickerControl} from './datepicker-base';\n\n\n/** Button that will close the datepicker and assign the current selection to the data model. */\n@Directive({\n  selector: '[matDatepickerApply], [matDateRangePickerApply]',\n  host: {'(click)': '_applySelection()'}\n})\nexport class MatDatepickerApply {\n  constructor(private _datepicker: MatDatepickerBase<MatDatepickerControl<unknown>, unknown>) {}\n\n  _applySelection() {\n    this._datepicker._applyPendingSelection();\n    this._datepicker.close();\n  }\n}\n\n\n/** Button that will close the datepicker and discard the current selection. */\n@Directive({\n  selector: '[matDatepickerCancel], [matDateRangePickerCancel]',\n  host: {'(click)': '_datepicker.close()'}\n})\nexport class MatDatepickerCancel {\n  constructor(public _datepicker: MatDatepickerBase<MatDatepickerControl<unknown>, unknown>) {}\n}\n\n\n/**\n * Container that can be used to project a row of action buttons\n * to the bottom of a datepicker or date range picker.\n */\n@Component({\n  selector: 'mat-datepicker-actions, mat-date-range-picker-actions',\n  styleUrls: ['datepicker-actions.css'],\n  template: `\n    <ng-template>\n      <div class=\"mat-datepicker-actions\">\n        <ng-content></ng-content>\n      </div>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class MatDatepickerActions implements AfterViewInit, OnDestroy {\n  @ViewChild(TemplateRef) _template: TemplateRef<unknown>;\n  private _portal: TemplatePortal;\n\n  constructor(\n    private _datepicker: MatDatepickerBase<MatDatepickerControl<unknown>, unknown>,\n    private _viewContainerRef: ViewContainerRef) {}\n\n  ngAfterViewInit() {\n    this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    this._datepicker.registerActions(this._portal);\n  }\n\n  ngOnDestroy() {\n    this._datepicker.removeActions(this._portal);\n\n    // Needs to be null checked since we initialize it in `ngAfterViewInit`.\n    if (this._portal && this._portal.isAttached) {\n      this._portal?.detach();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {MatDatepicker} from './datepicker';\nimport {\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker-base';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatDateRangeInput} from './date-range-input';\nimport {MatStartDate, MatEndDate} from './date-range-input-parts';\nimport {MatDateRangePicker} from './date-range-picker';\nimport {MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel} from './datepicker-actions';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n    MatDatepickerActions,\n    MatDatepickerCancel,\n    MatDatepickerApply\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n    MatDateRangeInput,\n    MatStartDate,\n    MatEndDate,\n    MatDateRangePicker,\n    MatDatepickerActions,\n    MatDatepickerCancel,\n    MatDatepickerApply\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './datepicker-module';\nexport * from './calendar';\nexport * from './calendar-body';\nexport * from './datepicker';\nexport {\n  MAT_DATE_RANGE_SELECTION_STRATEGY,\n  MatDateRangeSelectionStrategy,\n  DefaultMatCalendarRangeStrategy,\n} from './date-range-selection-strategy';\nexport * from './datepicker-animations';\nexport {\n  MAT_DATEPICKER_SCROLL_STRATEGY,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  MatDatepickerContent,\n  DatepickerDropdownPositionX,\n  DatepickerDropdownPositionY,\n} from './datepicker-base';\nexport {MatDatepickerInputEvent, DateFilterFn} from './datepicker-input-base';\nexport {\n  MAT_DATEPICKER_VALUE_ACCESSOR,\n  MAT_DATEPICKER_VALIDATORS,\n  MatDatepickerInput,\n} from './datepicker-input';\nexport * from './datepicker-intl';\nexport * from './datepicker-toggle';\nexport * from './month-view';\nexport * from './year-view';\nexport * from './date-range-input';\nexport {MatDateRangePicker} from './date-range-picker';\nexport * from './date-selection-model';\nexport {MatStartDate, MatEndDate} from './date-range-input-parts';\nexport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nexport * from './datepicker-actions';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MAT_DATE_RANGE_INPUT_PARENT as ɵangular_material_src_material_datepicker_datepicker_e} from './date-range-input-parts';\nexport {MAT_CALENDAR_RANGE_STRATEGY_PROVIDER as ɵangular_material_src_material_datepicker_datepicker_b,MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_material_datepicker_datepicker_a} from './date-range-selection-strategy';\nexport {MatDatepickerBase as ɵangular_material_src_material_datepicker_datepicker_c} from './datepicker-base';\nexport {MatDatepickerInputBase as ɵangular_material_src_material_datepicker_datepicker_d} from './datepicker-input-base';"]}