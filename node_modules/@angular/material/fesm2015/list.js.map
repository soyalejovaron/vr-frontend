{"version":3,"file":"list.js","sources":["../../../../../../src/material/list/list.ts","../../../../../../src/material/list/selection-list.ts","../../../../../../src/material/list/list-module.ts","../../../../../../src/material/list/public-api.ts","../../../../../../src/material/list/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAgCD;AACC;;;;;;;;;;;;;;;;;;;AACD,MAAM,WAAW;AACjB,CADoB;AACpB,MAAM,iBAAiB,GACnB,aAAa,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;AAEnD;AACC;AACD,MAAM,eAAe;AACrB,CADwB;AACxB,MAAM,qBAAqB,GACvB,kBAAkB,CAAC,eAAe,CAAC,CAAC;AAExC;AACC;AACC;AACC;AAEH;AAAA,MAAa,QAAQ,GAAG,IAAI,cAAc,CAAU,SAAS,CAAC,CAAC;AAE/D;AACC;AACC;AACC;AAEH;AAAA,MAAa,YAAY,GAAG,IAAI,cAAc,CAAa,YAAY,CAAC,CAAC;AAgBzE,MAAa,UAAW,SAAQ,iBAAiB;AAAI,IAdrD;AACI;AACE;AAGJ,QAYA,kBAAa,GAAG,IAAI,OAAO,EAAQ,CAAC;AAEtC,KAUC;AAED,IAZE,WAAW;AACZ,QAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC7B,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AACjC,KAAE;AAEH;wCA3BC,SAAS,SAAC,mBACT,QAAQ,EAAE,cAAc;iBACxB,QAAQ,EAAE,YAAY,mBACtB,IAAI,EAAE,uBACJ,MAAM,EAAE,YAAY,uBACpB,OAAO,EAAE,4BAA4B,mBACtC,mBACD,yCAAwB,mBAExB,MAAM,EAAE,CAAC,eAAe,EAAE,UAAU,CAAC,mBACrC,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM,mBAC/C,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,UAAU,EAAC,CAAC;;;;;;;;;;;;;;;;;;;0iZAC9D;;0BACK;AA8BN,MAAa,OAAQ,SAAQ,iBAAiB;AAAI,IAKhD,YAAoB,WAAoC;AACzD,QAAG,KAAK,EAAE,CAAC;AAEZ,QAHsB,gBAAW,GAAX,WAAW,CAAyB;AAAE;AAGlB,QALxC,kBAAa,GAAG,IAAI,OAAO,EAAQ,CAAC;AAEtC,QAGI,IAAI,IAAI,CAAC,YAAY,EAAE,KAAK,aAAa,EAAE;AAC9C,YAAK,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;AAChE,SAAI;AACJ,KAAE;AAEH,IAAE,YAAY;AAAM,QAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;AAE3E,QAAI,IAAI,QAAQ,KAAK,UAAU,EAAE;AAChC,YAAK,OAAO,MAAM,CAAC;AACnB,SAAI;AAEL,QAAI,IAAI,QAAQ,KAAK,iBAAiB,EAAE;AACvC,YAAK,OAAO,aAAa,CAAC;AAC1B,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC;AACf,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;AAC7B,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;AACjC,KAAE;AAEH;qCAhDC,SAAS,SAAC,mBACT,QAAQ,EAAE,2BAA2B;UACrC,QAAQ,EAAE,SAAS,mBACnB,yCAAwB,mBACxB,IAAI,EAAE,uBACJ,OAAO,EAAE,wBAAwB,mBAClC,mBAED,MAAM,EAAE,CAAC,eAAe,EAAE,UAAU,CAAC,mBACrC,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM,mBAC/C,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAC,CAAC;;;gEAElD;AAAE;AAAkC,YA9FxC,UAAU;AACV;;;;;;;;;;;;;;4kZA4FD;;2EA5FG;AAAE;AAAK;AAKK;AAEZ;AAqIJ,MAAa,yBAAyB;AACtC;uDALC,SAAS,SAAC,mBACT,QAAQ,EAAE;OAAoC,mBAC9C,IAAI,EAAE,EAAC,OAAO,EAAE,iBAAiB,EAAC,eACnC;;;;;;;0BACK;AAAE;AAAK;AAG8B;AAAkB;AAO7D,MAAa,uBAAuB;AACpC;qDALC,SAAS,SAAC,mBACT,QAAQ,EAAE;OAAgC,mBAC1C,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAC,eACjC;;;;;;;0BACK;AAAE;AAAK;AAGgC;AAAkB;AAO/D,MAAa,4BAA4B;AACzC;0DALC,SAAS,SAAC,mBACT,QAAQ,EAAE,iCAAiC;iBAC3C,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAC,eACjC;;;;;;;0BACK;AAAE;AAkBR,MAAa,WAAY,SAAQ,qBAAqB;AAAI,IAUxD,YAAoB,QAAiC,EACzC,kBAAqC,EACH,OAAoB,EACxB,IAAc;AACzD,QAAG,KAAK,EAAE,CAAC;AACX,QALqB,aAAQ,GAAR,QAAQ,CAAyB;AACvD,QATU,uBAAkB,GAAY,KAAK,CAAC;AAC7C,QACS,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;AAE3C,QAmCU,cAAS,GAAG,KAAK,CAAC;AAE5B,QA5BI,IAAI,CAAC,kBAAkB,GAAG,CAAC,EAAE,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE,KAAK,aAAa,CAAC,CAAC,CAAC;AAC5F,QAAG,IAAI,CAAC,KAAK,GAAG,OAAO,IAAI,IAAI,CAAC;AAEjC;AACK;AACK,QAAN,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;AAE3C,QAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE;AACrF,YAAK,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC5C,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,KAAK,EAAE;AACnB;AACO;AACO,YAAT,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;AACzE,gBAAO,kBAAkB,CAAC,YAAY,EAAE,CAAC;AACzC,aAAM,CAAC,CAAC;AACR,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,IACI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE;AACnF,IAAC,IAAI,QAAQ,CAAC,KAAc;AAC5B,QAAG,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACjD,KAAE;AACF,IAEC,kBAAkB;AACnB,QAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxC,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC9B,KAAE;AAEH;AACG,IAAD,iBAAiB;AAClB,QAAG,OAAO,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,aAAa;AACxD,YAAU,CAAC,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AACrD,KAAE;AAEH;AACG,IAAD,eAAe;AAAM,QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;AACtC,KAAE;AAEH;yCA9EC,SAAS,SAAC,mBACT,QAAQ,EAAE,wDAAwD,mBAClE,QAAQ,EAAE,aAAa,mBACvB,IAAI,EAAE,uBACJ,OAAO,EAAE;YAAmC,uBAC5C,gCAAgC,EAAE,UAAU,6IAE5C;KAA8B,EAAE,kBAAkB,uBAClD;YAAmC,EAAE,kBAAkB,oBACxD;EACD,MAAM,EAAE,CAAC,eAAe,CAAC,mBACzB;;;;;;;qBAA6B,mBAC7B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM,eAChD;;;;;;;;;;;;;;iFACK;AAAE;AAAsC,YAnL5C,UAAU;AACT,YAKD,iBAAiB;AAChB,YAwLuD,UAAU,uBAArD,QAAQ,YAAI,MAAM,SAAC,YAAY;AAAU,YACL,OAAO,uBAA3C,QAAQ,YAAI,MAAM,SAAC,QAAQ;AAAS;AAAI;AAE3C,qBATT,eAAe,SAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC;AAAQ,sBACpD,YAAY,SAAC,yBAAyB;AAAQ,oBAC9C,YAAY,SAAC,uBAAuB;AAAQ,uBA4B5C,KAAK;AACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;ACxON;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AA8CD,MAAM,oBAAoB;AAC1B,CAD6B;AAC7B,MAAM,0BAA0B,GAC5B,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;AAE7C,MAAM,iBAAiB;AACvB,CAD0B;AAC1B,MAAM,uBAAuB,GACzB,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AAE1C;AACA,MAAa,iCAAiC,GAAQ;AACrD,IAAC,OAAO,EAAE,iBAAiB;AAC3B,IAAC,WAAW,EAAE,UAAU,CAAC,MAAM,gBAAgB,CAAC;AAChD,IAAC,KAAK,EAAE,IAAI;AACZ,CAAA,CAAC;AAEF;AACA,MAAa,sBAAsB;AAClC,IAAC;AACD;AACC,IAAS,MAAwB;AACjC;AACC;AACC;AACC;AACC;AACC,IAAI,MAAqB;AAC9B;AACC,IAAQ,OAAwB;AACnC,QATW,WAAM,GAAN,MAAM,CAAkB;AACnC,QAKW,WAAM,GAAN,MAAM,CAAe;AAChC,QACW,YAAO,GAAP,OAAO,CAAiB;AAAE,KAAE;AACtC,CAAA;AAED;AACC;AACgB;AAIjB;AACiC;AAiCjC,MAAa,aAAc,SAAQ,uBAAuB;AAAI,IAoE5D,YAAoB,QAAiC,EACjC,eAAkC;AACtD;AAA0B,IACqC,aAA+B;AAC/F,QAAG,KAAK,EAAE,CAAC;AACX,QALqB,aAAQ,GAAR,QAAQ,CAAyB;AACvD,QAAsB,oBAAe,GAAf,eAAe,CAAmB;AACxD,QACiE,kBAAa,GAAb,aAAa,CAAkB;AAAE,QApExF,cAAS,GAAG,KAAK,CAAC;AAC3B,QAAS,cAAS,GAAG,KAAK,CAAC;AAC3B,QAAS,cAAS,GAAG,KAAK,CAAC;AAE5B;AACmB,QAOR,qBAAgB,GAAkC,OAAO,CAAC;AAErE;AAAa;AAEiB;AAAgC;AAAa,QAQjE,uBAAkB,GAAG,KAAK,CAAC;AACpC,KA6CE;AAEH;AAG4B,IA5D1B,IACI,KAAK,KAAmB,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;AAC9E,IAAC,IAAI,KAAK,CAAC,QAAsB,IAAI,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,EAAE;AAC9D;AAED,IAME,IACI,KAAK,KAAU,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;AACzC,IAAC,IAAI,KAAK,CAAC,QAAa;AACxB,QAAG,IACE,IAAI,CAAC,QAAQ;AAClB,YAAK,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC;AAC1D,YAAK,IAAI,CAAC,kBAAkB,EACvB;AACL,YAAK,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC3B,SAAI;AAEL,QAAI,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC1B,KAAE;AACF;AAEoB,IACnB,IACI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE;AACjG,IAAC,IAAI,QAAQ,CAAC,KAAU;AACxB,QAAG,MAAM,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAElD,QAAI,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;AACpC,YAAK,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/B,YAAK,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACzC,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,IACI,QAAQ,KAAc,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;AACxF,IAAC,IAAI,QAAQ,CAAC,KAAc;AAC5B,QAAG,MAAM,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAEpD,QAAI,IAAI,UAAU,KAAK,IAAI,CAAC,SAAS,EAAE;AACtC,YAAK,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AACnC,YAAK,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC;AAC7C,SAAI;AACJ,KAAE;AAEH,IAOE,QAAQ;AACT,QAAG,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC;AAEpC,QAAI,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE;AACvF,YAAK,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC7B,SAAI;AAEL,QAAI,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;AAEvC;AACK;AACK;AACK;AACK;AACK,QAArB,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;AAC1B,YAAK,IAAI,IAAI,CAAC,SAAS,IAAI,WAAW,EAAE;AACxC,gBAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC5B,gBAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AAC3C,aAAM;AACN,SAAI,CAAC,CAAC;AACN,QAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;AAClC,KAAE;AAEH,IAAE,kBAAkB;AACnB,QAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACxC,KAAE;AAEH,IAAE,WAAW;AAAM,QACf,IAAI,IAAI,CAAC,QAAQ,EAAE;AACtB;AACO;AACO,YAAT,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;AAC5B,gBAAO,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC7B,aAAM,CAAC,CAAC;AACR,SAAI;AAEL,QAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;AACnC,QAAG,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;AAEzE;AACK,QAAD,IAAI,QAAQ,IAAI,aAAa,EAAE;AAClC,YAAK,aAAa,CAAC,KAAK,EAAE,CAAC;AAC3B,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,MAAM;AAAM,QACV,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;AAClC,KAAE;AAEH;AACG,IAAD,KAAK;AAAM,QACT,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;AACvC,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,QAAQ;AACT,QAAG,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,WAAW,IAAI,EAAE,IAAI,EAAE,CAAC;AACzE,KAAE;AAEH;AACG,IAAD,iBAAiB;AAClB,QAAG,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;AAClF,KAAE;AAEH,IAAE,YAAY;AACb,QAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,aAAa,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;AAC1E,YAAK,IAAI,CAAC,MAAM,EAAE,CAAC;AAEpB;AACO,YAAD,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AACjD,SAAI;AACJ,KAAE;AAEH,IAAE,YAAY;AACb,QAAG,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AAC9C,QAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACzB,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;AACnC,QAAG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC1B,KAAE;AAEH;AACG,IAAD,eAAe;AAAM,QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;AACtC,KAAE;AAEH;AACG,IAAD,YAAY,CAAC,QAAiB;AAAK,QACjC,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;AACpC,YAAK,OAAO,KAAK,CAAC;AAClB,SAAI;AAEL,QAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAE9B,QAAI,IAAI,QAAQ,EAAE;AACjB,YAAK,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrD,SAAI;AAAE,aAAI;AACV,YAAK,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvD,SAAI;AAEL,QAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACvC,QAAG,OAAO,IAAI,CAAC;AACf,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,aAAa;AACd,QAAG,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACvC,KAAE;AAEH;2CA/NC,SAAS,SAAC,mBACT,QAAQ,EAAE,iBAAiB,mBAC3B,QAAQ,EAAE,eAAe,mBACzB,MAAM,EAAE,CAAC,eAAe,CAAC,mBACzB,IAAI,EAAE,uBACJ,MAAM,EAAE;OAAQ,uBAChB,OAAO,EAAE,mDAAmD,uBAC5D,SAAS,EAAE,gBAAgB,uBAC3B,QAAQ,EAAE,eAAe;mBACzB,SAAS,EAAE,gBAAgB,uBAC3B;8BAAgC,EAAE,UAAU,uBAC5C;+BAAmC,EAAE,kBAAkB;;;;;iDAIvD,qBAAqB,EAAE;cAAqB;;;;;kCAG5C,oBAAoB,EAAE,yCAAyC,uBAC/D,kBAAkB,EAAE,kBAAkB,uBACtC;+BAAyC,EAAE,qCAAqC,uBAChF,sBAAsB,EAAE,UAAU,uBAClC,sBAAsB,EAAE,UAAU,uBAClC,iBAAiB,EAAE,IAAI,oBACxB,mBACD;;;;wJAA+B,mBAC/B,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM,eAChD;;;;;;;;;;;;;;;;wHACK;AAAE;AAAwC,YAjG9C,UAAU;AACT,YALD,iBAAiB;AAChB,YA2K6E,gBAAgB,uBAAjF,MAAM,SAAC,UAAU,CAAC,MAAM,gBAAgB,CAAC;AAAS;AAAI;AAClE,sBAjEA,YAAY,SAAC,yBAAyB;AAAQ,oBAC9C,YAAY,SAAC,uBAAuB;AAAQ,qBAC5C,eAAe,SAAC,OAAO,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC;AAAQ,oBAGpD,SAAS,SAAC,MAAM;AAAQ,+BAGxB,KAAK;AAAM,oBAGX,KAAK;AACL,oBAUA,KAAK;AACL,uBAeA,KAAK;AACL,uBAWA,KAAK;AACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;AAAK;AACO;AAkKlB,MAAa,gBAAiB,SAAQ,0BAA0B;AAAI,IAmFlE,YAAoB,QAAiC;AACrD;AACC,IAAwB,QAAgB,EAC/B,eAAkC;AAC5C;AACC,IAAS,aAA4B;AACvC,QAAG,KAAK,EAAE,CAAC;AACX,QAPqB,aAAQ,GAAR,QAAQ,CAAyB;AACvD,QAEY,oBAAe,GAAf,eAAe,CAAmB;AAC9C,QACY,kBAAa,GAAb,aAAa,CAAe;AAAE,QAtFhC,cAAS,GAAG,IAAI,CAAC;AAC1B,QAAS,wBAAmB,GAAG,KAAK,CAAC;AAEtC;AACqC,QAMhB,oBAAe,GAC9B,IAAI,YAAY,EAA0B,CAAC;AAEjD;AACO;AACO;AAEC;AAAa,QAAjB,aAAQ,GAAW,CAAC,CAAC;AAEhC;AACO,QAAI,UAAK,GAAiB,QAAQ,CAAC;AAE1C;AACO;AACO;AACO;AAEC;AAAa,QAAxB,gBAAW,GAAkC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AAE9E,QAYU,cAAS,GAAY,KAAK,CAAC;AAErC;AAAgD,QAkB9C,oBAAe,GAAG,IAAI,cAAc,CAAgB,IAAI,CAAC,SAAS,CAAC,CAAC;AAEtE;AACO,QAAL,cAAS,GAAG,CAAC,CAAC,CAAC;AAEjB;AACO,QAAG,cAAS,GAAyB,CAAC,CAAM,QAAO,CAAC;AAE3D;AACE,QAGQ,eAAU,GAAG,IAAI,OAAO,EAAQ,CAAC;AAE3C;AACO,QAAL,eAAU,GAAe,SAAQ,CAAC;AAEpC,KAUG;AAEH;AACqB,IA7DnB,IACI,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AACnD,IAAC,IAAI,QAAQ,CAAC,KAAc;AAC5B,QAAG,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAElD;AACK;AACK;AACK;AACK,QAAhB,IAAI,CAAC,oBAAoB,EAAE,CAAC;AAC/B,KAAE;AACF;AAE+C,IAC9C,IACI,QAAQ,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AACnD,IAAC,IAAI,QAAQ,CAAC,KAAc;AAC5B,QAAG,MAAM,QAAQ,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAElD,QAAI,IAAI,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;AACpC,YAAK,IAAI,IAAI,CAAC,mBAAmB,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,EAAE;AACtF,gBAAO,MAAM,IAAI,KAAK,CACX,2EAA2E,CAAC,CAAC;AACxF,aAAM;AAEP,YAAM,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC/B,YAAK,IAAI,CAAC,eAAe,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;AAC9F,SAAI;AACJ,KAAE;AAEH,IA8BE,kBAAkB;AAAM;AACd,QAAR,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;AAEpC,QAAI,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,CAAgB,IAAI,CAAC,OAAO,CAAC;AACtE,aAAM,QAAQ,EAAE;AAChB,aAAM,aAAa,EAAE;AACrB,aAAM,cAAc,EAAE;AACtB;AACO;AACO,aAAR,aAAa,CAAC,MAAM,KAAK,CAAC;AAChC,aAAM,uBAAuB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AAE7C,QAAI,IAAI,IAAI,CAAC,MAAM,EAAE;AACpB,YAAK,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,SAAI;AAEL;AACK,QAAD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;AACtE,YAAK,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC9B,SAAI,CAAC,CAAC;AAEP;AACK,QAAD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;AACpF,YAAK,IAAI,CAAC,eAAe,EAAE,CAAC;AAC5B,SAAI,CAAC,CAAC;AAEP;AACK,QAAD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK;AAChF,YAAK,IAAI,KAAK,CAAC,KAAK,EAAE;AACtB,gBAAO,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,KAAK,EAAE;AACrC,oBAAS,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,iBAAQ;AACR,aAAM;AAEP,YAAM,IAAI,KAAK,CAAC,OAAO,EAAE;AACxB,gBAAO,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,EAAE;AACvC,oBAAS,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC/B,iBAAQ;AACR,aAAM;AACN,SAAI,CAAC,CAAC;AAEP;AACK,QAAD,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,EACtC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAC/B,SAAS,CAAC,MAAM;AACtB,YAAO,IAAI,MAAM,KAAK,UAAU,IAAI,MAAM,KAAK,SAAS,EAAE;AAC1D,gBAAS,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;AAE/D,gBAAU,IAAI,CAAC,WAAW,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;AACjD;AACS,oBAAE,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;AACjD,iBAAU;AAAE,qBAAI;AAChB;AACS,oBAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AACvD,iBAAU;AACV,aAAQ;AACR,SAAM,EAAE;AACR,KAAE;AAEH,IAAE,WAAW,CAAC,OAAsB;AACnC,QAAG,MAAM,oBAAoB,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACzD,QAAG,MAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE1C,QAAI,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,WAAW;AACjE,aAAQ,YAAY,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;AACpD,YAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC;AACjC,SAAI;AACJ,KAAE;AAEH,IAAE,WAAW;AACZ;AAAiB;AACK,QAAnB,MAAA,IAAI,CAAC,aAAa,0CAAE,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE;AACrD,QAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;AAC1B,QAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;AAC9B,QAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;AAC5B,KAAE;AAEH;AACG,IAAD,KAAK,CAAC,OAAsB;AAC7B,QAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC9C,KAAE;AAEH;AACG,IAAD,SAAS;AACV,QAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACrC,KAAE;AAEH;AACG,IAAD,WAAW;AACZ,QAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;AACtC,KAAE;AAEH;AACG,IAAD,iBAAiB,CAAC,MAAqB;AACxC,QAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAC7C,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,qBAAqB,CAAC,MAAqB;AAAK,QAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AAErD,QAAI,IAAI,WAAW,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,KAAK,WAAW,EAAE;AAC7E;AACO,YAAF,IAAI,WAAW,GAAG,CAAC,EAAE;AAC1B,gBAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;AAC1D,aAAM;AAAE,iBAAI,IAAI,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AAC9D,gBAAO,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7F,aAAM;AACN,SAAI;AAEL,QAAI,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;AACtC,KAAE;AAEH;AACG,IAAD,QAAQ,CAAC,KAAoB;AAC9B,QAAG,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AACjC,QAAG,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;AACpC,QAAG,MAAM,kBAAkB,GAAG,OAAO,CAAC,eAAe,CAAC;AACtD,QAAG,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;AAE9C,QAAI,QAAQ,OAAO;AAClB,YAAK,KAAK,KAAK,CAAC;AAChB,YAAK,KAAK,KAAK;AACf,gBAAO,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;AAChD,oBAAS,IAAI,CAAC,oBAAoB,EAAE,CAAC;AACrC;AACW,oBAAF,KAAK,CAAC,cAAc,EAAE,CAAC;AAChC,iBAAQ;AACR,gBAAO,MAAM;AACb,YAAK;AACL;AACS,gBAAF,IAAI,OAAO,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,cAAc,CAAC,KAAK,EAAE,SAAS,CAAC;AAC7E,oBAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;AAChC,oBAAS,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAChG,oBAAS,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC/D,oBAAS,KAAK,CAAC,cAAc,EAAE,CAAC;AAChC,iBAAQ;AAAE,qBAAI;AACd,oBAAS,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAClC,iBAAQ;AACR,SAAI;AAEL,QAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,UAAU,CAAC,IAAI,KAAK,CAAC,QAAQ;AAC1F,YAAO,OAAO,CAAC,eAAe,KAAK,kBAAkB,EAAE;AACvD,YAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC;AACjC,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,kBAAkB;AACnB;AACK;AACK;AACK,QAAZ,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AAC3C,YAAK,MAAM,KAAK,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;AACnD,YAAK,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC3B,YAAK,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;AACzB,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,gBAAgB,CAAC,OAAwB;AAC1C,QAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;AACpF,KAAE;AAEH;AACG,IAAD,UAAU,CAAC,MAAgB;AAAK,QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAEzB,QAAI,IAAI,IAAI,CAAC,OAAO,EAAE;AACrB,YAAK,IAAI,CAAC,qBAAqB,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;AAC9C,SAAI;AACJ,KAAE;AAEH;AACG,IAAD,gBAAgB,CAAC,UAAmB;AAAK,QACvC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;AAC9B,KAAE;AAEH;AACG,IAAD,gBAAgB,CAAC,EAAwB;AAAK,QAC5C,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACvB,KAAE;AAEH;AACG,IAAD,iBAAiB,CAAC,EAAc;AAAK,QACnC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACxB,KAAE;AAEH;AACG,IAAO,qBAAqB,CAAC,MAAgB;AAC/C,QAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;AAE/D,QAAI,MAAM,CAAC,OAAO,CAAC,KAAK;AACvB,YAAK,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM;AACzD;AACS;AACS,gBAAX,OAAO,MAAM,CAAC,QAAQ,GAAG,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC9E,aAAM,CAAC,CAAC;AAET,YAAM,IAAI,mBAAmB,EAAE;AAC9B,gBAAO,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC9C,aAAM;AACN,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG,IAAO,wBAAwB;AAAM,QACpC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AACrF,KAAE;AAEH;AACG,IAAO,oBAAoB;AAAM,QAChC,IAAI,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;AAExD,QAAI,IAAI,YAAY,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE;AACjE,YAAK,IAAI,aAAa,GAAkB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,YAAY,CAAC,CAAC;AAE9E,YAAM,IAAI,aAAa,IAAI,CAAC,aAAa,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;AAClG,gBAAO,aAAa,CAAC,MAAM,EAAE,CAAC;AAE/B;AACS;AACS,gBAAV,IAAI,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;AAC9C,aAAM;AACN,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAF,sBAAsB,CAC5B,UAAmB,EACnB,YAAsB,EACtB,WAAqB;AACxB;AACK;AACK,QAAP,MAAM,cAAc,GAAoB,EAAE,CAAC;AAE/C,QAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM;AAC9B,YAAK,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE;AACjF,gBAAO,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACnC,aAAM;AACN,SAAI,CAAC,CAAC;AAEP,QAAI,IAAI,cAAc,CAAC,MAAM,EAAE;AAC9B,YAAK,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAEhC,YAAM,IAAI,WAAW,EAAE;AACtB,gBAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;AAC7C,aAAM;AACN,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAL,aAAa,CAAC,KAAa;AAAK,QACtC,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACpD,KAAE;AAEH;AACG,IAAO,eAAe,CAAC,MAAqB;AAAK,QAChD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACjD,KAAE;AAEH;AACG,IAAO,oBAAoB;AAC7B,QAAG,IAAI,IAAI,CAAC,OAAO,EAAE;AACrB,YAAK,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC;AAC5D,SAAI;AACJ,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAL,iBAAiB;AAC1B,QAAG,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;AAExB,QAAI,UAAU,CAAC;AACd,YAAK,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACxB,YAAK,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;AACzC,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG,IAAO,eAAe;AAAM,QAC3B,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACzD,KAAE;AAEH;8CAvZC,SAAS,SAAC,mBACT,QAAQ,EAAE,oBAAoB,mBAC9B,QAAQ,EAAE,kBAAkB,mBAC5B,MAAM,EAAE,CAAC,eAAe,CAAC,mBACzB,IAAI,EAAE,uBACJ,MAAM,EAAE,SAAS;QACjB,OAAO,EAAE,kCAAkC,uBAC3C,WAAW,EAAE,kBAAkB,uBAC/B,6BAA6B,EAAE,UAAU,uBACzC;UAAsB,EAAE,qBAAqB,uBAC7C;cAAiB,EAAE;OAAW;WAC/B,mBACD,QAAQ,EAAE,2BAA2B;MAErC,aAAa,EAAE,iBAAiB,CAAC,IAAI,mBACrC,SAAS,EAAE,CAAC,iCAAiC,CAAC,mBAC9C,eAAe,EAAE,uBAAuB,CAAC;AAAM;;;;;;gEAE3C;AAAE;AAA2C,YA9TjD,UAAU;AACT,yCAkZE,SAAS,SAAC,UAAU;AAAU,YAvZjC,iBAAiB;AAChB,YAhBuC,YAAY;AAAI;AAAI;AAC7C,sBAyVd,eAAe,SAAC,aAAa,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC;AAAQ,8BAG1D,MAAM;AAAM,uBAOZ,KAAK;AAAM,oBAGX,KAAK;AAAM,0BAOX,KAAK;AAAM,uBAGX,KAAK;AACL,uBAaA,KAAK;AACN;;;;;;;;;;;;;;;;;;;onWAhDD;;;;;;;;;;;;;;;;;;;;oBAgDG;AAAE;ACxYN;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAAD,MA+Ca,aAAa;AAC1B;2CA5BC,QAAQ,SAAC;QACR,OAAO,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,uBAAuB,EAAE,YAAY,CAAC,mBACjG,OAAO,EAAE,uBACP,OAAO,uBACP,UAAU,uBACV,WAAW;QACX;QAAyB,uBACzB;WAAa;IACb,eAAe,uBACf,uBAAuB,uBACvB,4BAA4B,uBAC5B,uBAAuB,uBACvB,gBAAgB,uBAChB,aAAa,uBACb,gBAAgB,mBACjB,mBACD,YAAY,EAAE,uBACZ,OAAO,uBACP,UAAU,uBACV,WAAW,uBACX,yBAAyB,uBACzB,uBAAuB;cACvB,4BAA4B,uBAC5B,gBAAgB,uBAChB,aAAa,mBACd,gBACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BACK;AAAE;ACvDR;AACC;AACC;AAEF;AAAI;AACC;AAGJ,GAFE;AAEH;ACRA;AACC;AACC,GAAC;AAEH;AAAE;AACqO","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n  Input,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase =\n    mixinDisabled(mixinDisableRipple(MatListBase));\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_LIST = new InjectionToken<MatList>('MatList');\n\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_NAV_LIST = new InjectionToken<MatNavList>('MatNavList');\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_NAV_LIST, useExisting: MatNavList}],\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple,\n  OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_LIST, useExisting: MatList}],\n})\nexport class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item mat-focus-indicator',\n    '[class.mat-list-item-disabled]': 'disabled',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_NAV_LIST) navList?: MatNavList,\n              @Optional() @Inject(MAT_LIST) list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attribute is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager, FocusMonitor} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  ENTER,\n  hasModifierKey,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /**\n     * Reference to the option that has been changed.\n     * @deprecated Use `options` instead, because some events may change more than one option.\n     * @breaking-change 12.0.0\n     */\n    public option: MatListOption,\n    /** Reference to the options that have been changed. */\n    public options: MatListOption[]) {}\n}\n\n/**\n * Type describing possible positions of a checkbox in a list option\n * with respect to the list item's text.\n */\nexport type MatListOptionCheckboxPosition = 'before'|'after';\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabindex]': '-1',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: MatListOptionCheckboxPosition = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (\n      this.selected &&\n      !this.selectionList.compareWith(newValue, this.value) &&\n      this._inputsInitialized\n    ) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent([this]);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    'class': 'mat-selection-list mat-list-base',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': '_tabIndex',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n  private _multiple = true;\n  private _contentInitialized = false;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /**\n   * Tabindex of the selection list.\n   * @breaking-change 11.0.0 Remove `tabIndex` input.\n   */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if (this._contentInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error(\n            'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** The tabindex of the selection list. */\n  _tabIndex = -1;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    @Attribute('tabindex') tabIndex: string,\n    private _changeDetector: ChangeDetectorRef,\n    // @breaking-change 11.0.0 `_focusMonitor` parameter to become required.\n    private _focusMonitor?: FocusMonitor) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    this._contentInitialized = true;\n\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      .withHomeAndEnd()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n\n    // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n    this._focusMonitor?.monitor(this._element)\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(origin => {\n        if (origin === 'keyboard' || origin === 'program') {\n          const activeIndex = this._keyManager.activeItemIndex;\n\n          if (!activeIndex || activeIndex === -1) {\n            // If there is no active index, set focus to the first option.\n            this._keyManager.setFirstItemActive();\n          } else {\n            // Otherwise, set focus to the active option.\n            this._keyManager.setActiveItem(activeIndex);\n          }\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n    this._focusMonitor?.stopMonitoring(this._element);\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n            !manager.isTyping()) {\n          const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n          this._setAllOptionsSelected(shouldSelect, true, true);\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(options: MatListOption[]) {\n    this.selectionChange.emit(new MatSelectionListChange(this, options[0], options));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent([focusedOption]);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(\n    isSelected: boolean,\n    skipDisabled?: boolean,\n    isUserInput?: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    const changedOptions: MatListOption[] = [];\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        changedOptions.push(option);\n      }\n    });\n\n    if (changedOptions.length) {\n      this._reportValueChange();\n\n      if (isUserInput) {\n        this._emitChangeEvent(changedOptions);\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  private _allowFocusEscape() {\n    this._tabIndex = -1;\n\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n\n  /** Updates the tabindex based upon if the selection list is empty. */\n  private _updateTabIndex(): void {\n    this._tabIndex = (this.options.length === 0) ? -1 : 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}