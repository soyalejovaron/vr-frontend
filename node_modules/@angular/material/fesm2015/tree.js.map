{"version":3,"file":"tree.js","sources":["../../../../../../src/material/tree/node.ts","../../../../../../src/material/tree/padding.ts","../../../../../../src/material/tree/outlet.ts","../../../../../../src/material/tree/tree.ts","../../../../../../src/material/tree/toggle.ts","../../../../../../src/material/tree/tree-module.ts","../../../../../../src/material/tree/data-source/flat-data-source.ts","../../../../../../src/material/tree/data-source/nested-data-source.ts","../../../../../../src/material/tree/public-api.ts","../../../../../../src/material/tree/index.ts"],"names":[],"mappings":";;;;;;;;AAAA;AACC;AACC;AAEF;AAAI;AACC;AAGJ;;;AA2BD,MAAM,qBAAqB,GACvB,aAAa,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC;AAE9C;AACC;AACC;AAOF,MAAa,WAAsB,SAAQ,qBAA2B;AACnE,IAGD,YAAsB,WAAoC,EACpC,KAAoB,EACP,QAAgB;AACpD,QAAG,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;AAE9B,QALwB,gBAAW,GAAX,WAAW,CAAyB;AAC5D,QAAwB,UAAK,GAAL,KAAK,CAAe;AAC5C,QAGI,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACzC;AACK;AACK;AACK;AACK,QAAjB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AACjE,KAAE;AAEH;AACG;AACG,IAAJ,QAAQ;AACT,QAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACpB,KAAE;AAEH,IAAE,SAAS;AACV,QAAG,KAAK,CAAC,SAAS,EAAE,CAAC;AACrB,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,KAAK,CAAC,WAAW,EAAE,CAAC;AACvB,KAAE;AAEH;yCArCC,SAAS,SAAC,mBACT,QAAQ,EAAE,eAAe,mBACzB,QAAQ,EAAE,aAAa,mBACvB,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC;WACxC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAC,CAAC,eAC9D,2OACK;AAAE;AAAsC,YA3B5C,UAAU;AACT,YAVD,OAAO;AACN,yCAyCY,SAAS,SAAC,UAAU;AAAS;;;;;;;;;;;;kCAAE;AAAE;AAAK;AAGhB;AAErC;AAmCA,MAAa,cAAkB,SAAQ,cAAiB;AACvD;4CARA,SAAS,SAAC,mBACT,QAAQ,EAAE,kBAAkB;SAC5B,MAAM,EAAE,uBACN,0BAA0B,mBAC3B,mBACD,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,cAAc,EAAC,CAAC,eACpE,6IACK;AAAE;AAAmC,mBACxC,KAAK,SAAC,aAAa;AAAO;;;;;;;;;;;;;;oBAAE;AAC/B;AAEE;AACiE;AAYnE,MAAa,iBAA4B,SAAQ,iBAAuB;AACrE,IAkBD,YAAsB,WAAoC,EACpC,KAAoB,EACpB,QAAyB,EACZ,QAAgB;AACpD,QAAG,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AACvC,QALuB,gBAAW,GAAX,WAAW,CAAyB;AAC5D,QAAwB,UAAK,GAAL,KAAK,CAAe;AAC5C,QAAwB,aAAQ,GAAR,QAAQ,CAAiB;AACjD,QAdU,cAAS,GAAG,KAAK,CAAC;AAE5B,QAcI,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACzC;AACK;AACK;AACK;AACK,QAAjB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACxE,KAAE;AAEH;AAA0C,IA3BxC,IACI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE;AAC1C,IAAC,IAAI,QAAQ,CAAC,KAAU,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,EAAE;AAC5E;AAEK,IACJ,IACI,QAAQ,KAAa,OAAO,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE;AACvE,IAAC,IAAI,QAAQ,CAAC,KAAa;AAC3B;AACK,QAAF,IAAI,CAAC,SAAS,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,GAAG,CAAC,CAAC;AAC9C,KAAE;AACF;AAEmD;AAEjC;AACsB,IAavC,QAAQ;AACT,QAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;AACpB,KAAE;AAEH,IAAE,SAAS;AACV,QAAG,KAAK,CAAC,SAAS,EAAE,CAAC;AACrB,KAAE;AAEH,IAAE,kBAAkB;AACnB,QAAG,KAAK,CAAC,kBAAkB,EAAE,CAAC;AAC9B,KAAE;AAEH,IAAE,WAAW;AACZ,QAAG,KAAK,CAAC,WAAW,EAAE,CAAC;AACvB,KAAE;AAEH;+CA7DC,SAAS,SAAC,mBACT,QAAQ,EAAE,sBAAsB,mBAChC,QAAQ,EAAE,mBAAmB,mBAC7B,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,mBACxC,SAAS,EAAE,uBACT,EAAC;KAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAC,uBAC5D,EAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,iBAAiB,EAAC,uBACtD,EAAC,OAAO,EAAE,yBAAyB,EAAE,WAAW,EAAE,iBAAiB,EAAC,mBACrE,eACF;;;;kDACK;AAAE;AAA4C,YA1FlD,UAAU;AACT,YAVD,OAAO;AACN,YAUD,eAAe;AACd,yCA6GY,SAAS,SAAC,UAAU;AAAS;AAAI;AACnB,mBArB1B,KAAK,SAAC,mBAAmB;AAAQ,uBAGjC,KAAK;AACL,uBAKA,KAAK;AACN;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AAAE;AC1HN;AACC;AACC;AAEF;AAAI;AACC;AAEH;AAGF;AACC;AACC;AAKF,MAAa,kBAA6B,SAAQ,kBAAwB;AAE1E;AACG,IAAD,IACI,KAAK,KAAa,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE;AAC5C,IAAC,IAAI,KAAK,CAAC,KAAa,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE;AAE1D;AACG,IAAD,IACI,MAAM,KAAsB,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE;AACvD,IAAC,IAAI,MAAM,CAAC,MAAuB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE;AACtE;gDAfA,SAAS,SAAC,mBACT,QAAQ,EAAE,sBAAsB;CAChC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,kBAAkB,EAAC,CAAC,eAC5E,mRACK;AAAE;AAAuC,oBAG5C,KAAK,SAAC,oBAAoB;AACvB,qBAIH,KAAK,SAAC,0BAA0B;AAC9B;;;;;;;;;;;;;;oBAAE;AAAE;AC1BT;AACC;AACC;AAEF;AAAI;AACC;AAEH;AAQF;AACC;AACC;AACC;AAQH,MAAa,iBAAiB;AAAI,IAChC,YACW,aAA+B,EACgB,KAAW;AACvE,QAFa,kBAAa,GAAb,aAAa,CAAkB;AAC5C,QAA4D,UAAK,GAAL,KAAK,CAAM;AAAE,KAAE;AAC1E;+CAXA,SAAS,SAAC,mBACT,QAAQ,EAAE,qBAAqB,mBAC/B,SAAS,EAAE,CAAC,2BACV,OAAO,EAAE,iBAAiB;cAC1B,WAAW,EAAE,iBAAiB,uBAC/B,CAAC,eACH;;;oBACK;AAAE;AAA4C,YAdlD,gBAAgB;AACf,4CAgBI,MAAM,SAAC,yBAAyB,cAAG,QAAQ;AAAO;;;;;;;;;;;;;;;kCAAE;AAAE;AC7B7D;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AASD;AACC;AACC;AAuBF,MAAa,OAAkB,SAAQ,OAAa;AACnD;qCAvBA,SAAS,SAAC,mBACT,QAAQ,EAAE;GAAU,mBACpB,QAAQ,EAAE,SAAS,mBACnB,QAAQ,EAAE,iDAAiD,mBAC3D,IAAI;CAAE;;;;;;wFAQJ,OAAO,EAAE,mBAAmB,uBAC5B,MAAM,EAAE,MAAM,oBACf,mBAED,aAAa,EAAE,cAMX;CAN4B,CAAC,IAAI,NAM/B;AAA4B,0BAEjC,SAAS,SAAC,iBAAiB,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC;AAAO;;GALnD,eAAe,EAAE,uBAAuB,CAAC,OAAO,mBAChD,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,OAAO,EAAE;UAAW,EAAE,OAAO,EAAC,CAAC;;;;;mBACtD;;;;;;;;;;;;;;;;;;;;;oBAGsD;AAAE;AC5CzD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAID;AACC;AACC;AACC;AAKH,MAAa,iBAA4B,SAAQ,iBAAuB;AACvE,IAAC,IACI,SAAS,KAAc,OAAO,IAAI,CAAC,UAAU,CAAC,EAAE;AACrD,IAAC,IAAI,SAAS,CAAC,KAAc;AAC7B;AACK;AACK,QAAP,IAAI,CAAC,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;AAClD,KAAE;AACF;+CAbA,SAAS,SAAC,mBACT,QAAQ,EAAE,qBAAqB;GAC/B,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,iBAAiB,EAAC,CAAC,eAC1E,8OACK;AAAE;AACN,wBACC,KAAK,SAAC,4BAA4B;AAChC;;;;;;;;;;;oBAAE;AAAE;ACtBT;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAUD,MAAM,mBAAmB,GAAG;AAC3B,IAAC,iBAAiB;AAClB,IAAC,cAAc;AACf,IAAC,kBAAkB;AACnB,IAAC,iBAAiB;AAClB,IAAC,OAAO;AACR,IAAC,WAAW;AACZ,IAAC,iBAAiB;AAClB,CAAA,CAAC;AAOF,MAAa,aAAa;AAC1B;2CANC,QAAQ,SAAC;QACR,OAAO,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC,mBACzC,OAAO,EAAE,CAAC,eAAe,EAAE,mBAAmB,CAAC,mBAC/C,YAAY,EAAE,mBAAmB,gBAClC;;;;;;;;;0BACK;AAAE;ACjCR;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAKD;AACC;AACC;AAEF;AAAI;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AACC;AAET;AAEH;AAAS;AAAO;AAEf;AAAiB;AACC;AAEd;AACS;AACP;AACJ;AAAqB;AAGrB;AACC;AAAQ;AACF;AACL;AAEM;AAAe;AAAM;AAEH;AAA7B,MAAa,gBAAgB;AAAI,IAE/B,YAAmB,iBAAgD,EAChD,QAA6B,EAC7B,YAAkC,EAClC,WACqC;AAC1D,QALqB,sBAAiB,GAAjB,iBAAiB,CAA+B;AACrE,QAAqB,aAAQ,GAAR,QAAQ,CAAqB;AAClD,QAAqB,iBAAY,GAAZ,YAAY,CAAsB;AACvD,QAAqB,gBAAW,GAAX,WAAW,CAC0B;AAAE,KAAE;AAE9D,IAAE,YAAY,CAAC,IAAO,EAAE,KAAa,EACtB,WAAgB,EAAE,SAAoB;AAAK,QACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACxD,QAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAE/B,QAAI,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;AACpC,YAAK,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAClD,YAAK,IAAI,aAAa,EAAE;AACxB,gBAAO,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;AACzC,oBAAS,IAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;AAC7E,iBAAQ;AAAE,qBAAI;AACd,oBAAS,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ;AACvD,wBAAW,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;AAC1E,qBAAU,CAAC,CAAC;AACZ,iBAAQ;AACR,aAAM;AACN,SAAI;AACJ,QAAG,OAAO,WAAW,CAAC;AACtB,KAAE;AAEH,IAAE,gBAAgB,CAAC,QAAa,EAAE,KAAa,EAC5B,WAAgB,EAAE,SAAoB;AAAK,QAC1D,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK;AACjC,YAAK,IAAI,cAAc,GAAc,SAAS,CAAC,KAAK,EAAE,CAAC;AACvD,YAAK,cAAc,CAAC,IAAI,CAAC,KAAK,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AACvD,YAAK,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;AACtE,SAAI,CAAC,CAAC;AACN,KAAE;AAEH;AACG;AACG;AACG;AAEH;AAAS,IAAb,YAAY,CAAC,cAAmB;AAAK,QACnC,IAAI,WAAW,GAAQ,EAAE,CAAC;AAC7B,QAAG,cAAc,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;AAC/E,QAAG,OAAO,WAAW,CAAC;AACtB,KAAE;AAEH;AACG;AACG;AAEH;AAAS,IAAV,oBAAoB,CAAC,KAAU,EAAE,WAA8B;AAAK,QAClE,IAAI,OAAO,GAAQ,EAAE,CAAC;AACzB,QAAG,IAAI,aAAa,GAAc,EAAE,CAAC;AACrC,QAAG,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAE5B,QAAI,KAAK,CAAC,OAAO,CAAC,IAAI;AACrB,YAAK,IAAI,MAAM,GAAG,IAAI,CAAC;AACvB,YAAK,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACpD,gBAAO,MAAM,GAAG,MAAM,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;AAC3C,aAAM;AACN,YAAK,IAAI,MAAM,EAAE;AACjB,gBAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1B,aAAM;AACN,YAAK,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;AAClC,gBAAO,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7E,aAAM;AACN,SAAI,CAAC,CAAC;AACN,QAAG,OAAO,OAAO,CAAC;AAClB,KAAE;AACF,CAAA;AAED;AAEA;AACC;AACC;AACC;AACC;AAEH;AAAD,MAAa,qBAAmC,SAAQ,UAAa;AACpE,IAYC,YAAoB,YAAmC,EACnC,cAAyC,EACjD,cAAmB,EAAE;AAClC,QAAG,KAAK,EAAE,CAAC;AACX,QAJqB,iBAAY,GAAZ,YAAY,CAAuB;AACzD,QAAsB,mBAAc,GAAd,cAAc,CAA2B;AAC/D,QAdE,mBAAc,GAAG,IAAI,eAAe,CAAM,EAAE,CAAC,CAAC;AAEhD,QAAE,kBAAa,GAAG,IAAI,eAAe,CAAM,EAAE,CAAC,CAAC;AAE/C,QAYI,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAM,WAAW,CAAC,CAAC;AACtD,KAAE;AAEH,IAdE,IAAI,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;AACxC,IAAC,IAAI,IAAI,CAAC,KAAU;AACpB,QAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,QAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACzE,QAAG,IAAI,CAAC,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;AAC3D,KAAE;AAEH,IAOE,OAAO,CAAC,gBAAkC;AAAK,QAC7C,MAAM,OAAO,GAAG;AACnB,YAAK,gBAAgB,CAAC,UAAU;AAChC,YAAK,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO;AAC7C,YAAK,IAAI,CAAC,cAAc;AACxB,SAAI,CAAC;AACL,QAAG,OAAO,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;AACrC,YAAK,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;AAC/F,YAAK,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;AACrC,SAAI,CAAC,CAAC,CAAC;AACP,KAAE;AAEH,IAAE,UAAU;AACX;AAGD,KAFG;AACF,CAAA;AACA;ACrKD;AACC;AACC;AAEF;AAAI;AACC;AAGJ;AAKD;AACC;AACC;AACC;AACC;AAEH;AAAD,MAAa,uBAA2B,SAAQ,UAAa;AAC5D,IADD;AAAiB;AAA8B,QAC7C,UAAK,GAAG,IAAI,eAAe,CAAM,EAAE,CAAC,CAAC;AAEvC,KAgBC;AACA;AAAS;AAAiC;AAAS,IAdlD,IAAI,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;AACxC,IAAC,IAAI,IAAI,CAAC,KAAU,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AAElD,IAAE,OAAO,CAAC,gBAAkC;AAAK,QAC7C,OAAO,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7D,aAAM,IAAI,CAAC,GAAG,CAAC;AACf,YAAO,OAAO,IAAI,CAAC,IAAI,CAAC;AACxB,SAAM,CAAC,CAAC,CAAC;AACT,KAAE;AAEH,IAAE,UAAU;AACX;AAGD,KAFG;AACF,CAAA;AACA;ACvCD;AACC;AACC;AAEF;AAAI;AACC;AAIL,GAHG;AAEH;ACRA;AACC;AACC,GAAC;AAEH;AAAE;AACkL","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CDK_TREE_NODE_OUTLET_NODE,\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  Directive,\n  DoCheck,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy, OnInit,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\n\nconst _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['role', 'disabled', 'tabIndex'],\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T, K = T> extends _MatTreeNodeMixinBase<T, K>\n    implements CanDisable, DoCheck, HasTabIndex, OnInit, OnDestroy {\n\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T, K>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n    // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.classList.add('mat-tree-node');\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  inputs: ['role', 'disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T, K = T> extends CdkNestedTreeNode<T, K>\n    implements AfterContentInit, DoCheck, OnDestroy, OnInit {\n  @Input('matNestedTreeNode') node: T;\n\n  /** Whether the node is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled = false;\n\n  /** Tabindex for the node. */\n  @Input()\n  get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n  set tabIndex(value: number) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  private _tabIndex: number;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T, K>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n    this.tabIndex = Number(tabIndex) || 0;\n    // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n    this._elementRef.nativeElement.classList.add('mat-nested-tree-node');\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T, K = T> extends CdkTreeNodePadding<T, K> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding')\n  get level(): number { return this._level; }\n  set level(value: number) { this._setLevelInput(value); }\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent')\n  get indent(): number | string { return this._indent; }\n  set indent(indent: number | string) { this._setIndentInput(indent); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  Inject,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]',\n  providers: [{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }]\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(\n      public viewContainer: ViewContainerRef,\n      @Inject(CDK_TREE_NODE_OUTLET_NODE) @Optional() public _node?: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n    // to be set in the host because:\n    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n    // class from it.\n    // the ElementRef is not available in the constructor so the class can't be applied directly\n    // without a breaking constructor change.\n    'class': 'mat-tree cdk-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  // See note on CdkTree for explanation on why this uses the default change detection strategy.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T, K = T> extends CdkTree<T, K> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet, {static: true}) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\n// tslint:disable-next-line: coercion-types\nexport class MatTreeNodeToggle<T, K = T> extends CdkTreeNodeToggle<T, K> {\n  @Input('matTreeNodeToggleRecursive')\n  get recursive(): boolean { return this._recursive; }\n  set recursive(value: boolean) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._recursive = coerceBooleanProperty(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, MatCommonModule],\n  exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F, K = F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) =>\n                  Observable<T[]> | T[] | undefined | null) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F, K>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F, K = F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private _treeControl: FlatTreeControl<F, K>,\n              private _treeFlattener: MatTreeFlattener<T, F, K>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this._treeControl.expansionModel.changed,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nexport * from './node';\nexport * from './padding';\nexport * from './tree';\nexport * from './tree-module';\nexport * from './toggle';\nexport * from './outlet';\nexport * from './data-source/flat-data-source';\nexport * from './data-source/nested-data-source';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}