{"version":3,"file":"snack-bar.js","sources":["../../../../../../src/material/snack-bar/snack-bar-config.ts","../../../../../../src/material/snack-bar/snack-bar-ref.ts","../../../../../../src/material/snack-bar/simple-snack-bar.ts","../../../../../../src/material/snack-bar/snack-bar-animations.ts","../../../../../../src/material/snack-bar/snack-bar-container.ts","../../../../../../src/material/snack-bar/snack-bar-module.ts","../../../../../../src/material/snack-bar/snack-bar.ts","../../../../../../src/material/snack-bar/public-api.ts","../../../../../../src/material/snack-bar/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /**\n   * The view container that serves as the parent for the snackbar for the purposes of dependency\n   * injection. Note: this does not affect where the snackbar is inserted in the DOM.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {_SnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: _SnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: _SnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    // Note that we need to cap the duration to the maximum value for setTimeout, because\n    // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed;\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Inject, ViewEncapsulation} from '@angular/core';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Interface for a simple snack bar component that has a message and a single action.\n */\nexport interface TextOnlySnackBar {\n  data: {message: string, action: string};\n  snackBarRef: MatSnackBarRef<TextOnlySnackBar>;\n  action: () => void;\n  hasAction: boolean;\n}\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar implements TextOnlySnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  DomPortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n/**\n * Internal interface for a snack bar container.\n * @docs-private\n */\nexport interface _SnackBarContainer {\n  snackBarConfig: MatSnackBarConfig;\n  _onAnnounce: Subject<any>;\n  _onExit: Subject<any>;\n  _onEnter: Subject<any>;\n  enter: () => void;\n  exit: () => Observable<void>;\n  attachTemplatePortal: <C>(portal: TemplatePortal<C>) => EmbeddedViewRef<C>;\n  attachComponentPortal: <T>(portal: ComponentPortal<T>) => ComponentRef<T>;\n}\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  // In Ivy embedded views will be change detected from their declaration place, rather than\n  // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n  // because it might cause snack bars that were opened from a template not to be out of date.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet\n    implements OnDestroy, _SnackBarContainer {\n  /** The number of milliseconds to wait before announcing the snack bar's content. */\n  private readonly _announceDelay: number = 150;\n\n  /** The timeout for announcing the snack bar's content. */\n  private _announceTimeoutId: number;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet, {static: true}) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has announced to screen readers. */\n  readonly _onAnnounce: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<void> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<void> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** aria-live value for the live region. */\n  _live: AriaLivePoliteness;\n\n  /**\n   * Role of the live region. This is only for Firefox as there is a known issue where Firefox +\n   * JAWS does not read out aria-live message.\n   */\n  _role?: 'status' | 'alert';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _platform: Platform,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Use aria-live rather than a live role like 'alert' or 'status'\n    // because NVDA and JAWS have show inconsistent behavior with live roles.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._live = 'assertive';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._live = 'off';\n    } else {\n      this._live = 'polite';\n    }\n\n    // Only set role for Firefox. Set role based on aria-live because setting role=\"alert\" implies\n    // aria-live=\"assertive\" which may cause issues if aria-live is set to \"polite\" above.\n    if (this._platform.FIREFOX) {\n      if (this._live === 'polite') {\n        this._role = 'status';\n      }\n      if (this._live === 'assertive') {\n        this._role = 'alert';\n      }\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /**\n   * Attaches a DOM portal to the snack bar container.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = (portal: DomPortal) => {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachDomPortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n      this._screenReaderAnnounce();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n\n    // Mark this element with an 'exit' attribute to indicate that the snackbar has\n    // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n    // test harness.\n    this._elementRef.nativeElement.setAttribute('mat-exit', '');\n\n    // If the snack bar hasn't been announced by the time it exits it wouldn't have been open\n    // long enough to visually read it either, so clear the timeout for announcing.\n    clearTimeout(this._announceTimeoutId);\n\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n\n  /**\n   * Starts a timeout to move the snack bar content to the live region so screen readers will\n   * announce it.\n   */\n  private _screenReaderAnnounce() {\n    if (!this._announceTimeoutId) {\n      this._ngZone.runOutsideAngular(() => {\n        this._announceTimeoutId = setTimeout(() => {\n          const inertElement = this._elementRef.nativeElement.querySelector('[aria-hidden]');\n          const liveElement = this._elementRef.nativeElement.querySelector('[aria-live]');\n\n          if (inertElement && liveElement) {\n            // If an element in the snack bar content is focused before being moved\n            // track it and restore focus after moving to the live region.\n            let focusedElement: HTMLElement | null = null;\n            if (this._platform.isBrowser &&\n                document.activeElement instanceof HTMLElement &&\n                inertElement.contains(document.activeElement)) {\n              focusedElement = document.activeElement;\n            }\n\n            inertElement.removeAttribute('aria-hidden');\n            liveElement.appendChild(inertElement);\n            focusedElement?.focus();\n\n            this._onAnnounce.next();\n            this._onAnnounce.complete();\n          }\n        }, this._announceDelay);\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy, Type,\n} from '@angular/core';\nimport {takeUntil} from 'rxjs/operators';\nimport {TextOnlySnackBar, SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer, _SnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** The component that should be rendered as the snack bar's simple component. */\n  protected simpleSnackBarComponent: Type<TextOnlySnackBar> = SimpleSnackBar;\n\n  /** The container component that attaches the provided template or component. */\n  protected snackBarContainerComponent: Type<_SnackBarContainer> = MatSnackBarContainer;\n\n  /** The CSS class to applie for handset mode. */\n  protected handsetCssClass = 'mat-snack-bar-handset';\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n      MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n      MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<TextOnlySnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    // Since the snack bar has `role=\"alert\"`, we don't\n    // want to announce the same message twice.\n    if (_config.announcementMessage === message) {\n      _config.announcementMessage = undefined;\n    }\n\n    return this.openFromComponent(this.simpleSnackBarComponent, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                     config: MatSnackBarConfig): _SnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = Injector.create({\n      parent: userInjector || this._injector,\n      providers: [{provide: MatSnackBarConfig, useValue: config}]\n    });\n\n    const containerPortal =\n        new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<_SnackBarContainer> =\n        overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n      MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(\n        takeUntil(overlayRef.detachments())\n    ).subscribe(state => {\n      const classList = overlayRef.overlayElement.classList;\n      state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n    });\n\n    if (config.announcementMessage) {\n      // Wait until the snack bar contents have been announced then deliver this message.\n      container._onAnnounce.subscribe(() => {\n        this._live.announce(config.announcementMessage!, config.politeness);\n      });\n    }\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n        config.horizontalPosition === 'left' ||\n        (config.horizontalPosition === 'start' && !isRtl) ||\n        (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(config: MatSnackBarConfig, snackBarRef: MatSnackBarRef<T>): Injector {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return Injector.create({\n      parent: userInjector || this._injector,\n      providers: [\n        {provide: MatSnackBarRef, useValue: snackBarRef},\n        {provide: MAT_SNACK_BAR_DATA, useValue: config.data}\n      ]\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './snack-bar-module';\nexport * from './snack-bar';\nexport * from './snack-bar-container';\nexport * from './snack-bar-config';\nexport * from './snack-bar-ref';\nexport * from './simple-snack-bar';\nexport * from './snack-bar-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}