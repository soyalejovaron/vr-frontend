{"version":3,"file":"chips.js","sources":["../../../../../../src/material/chips/chip.ts","../../../../../../src/material/chips/chip-default-options.ts","../../../../../../src/material/chips/chip-list.ts","../../../../../../src/material/chips/chip-input.ts","../../../../../../src/material/chips/chips-module.ts","../../../../../../src/material/chips/public-api.ts","../../../../../../src/material/chips/index.ts"],"names":["nextUniqueId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Attribute,\n  ChangeDetectorRef,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_REMOVE = new InjectionToken<MatChipRemove>('MatChipRemove');\n\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_AVATAR = new InjectionToken<MatChipAvatar>('MatChipAvatar');\n\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_CHIP_TRAILING_ICON =\n    new InjectionToken<MatChipTrailingIcon>('MatChipTrailingIcon');\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nabstract class MatChipBase {\n  abstract disabled: boolean;\n  constructor(public _elementRef: ElementRef) {}\n}\n\nconst _MatChipMixinBase: CanColorCtor & CanDisableRippleCtor &\n    HasTabIndexCtor & typeof MatChipBase =\n      mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'},\n  providers: [{provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar}]\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'},\n  providers: [{provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon}],\n})\nexport class MatChipTrailingIcon {}\n\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip mat-focus-indicator',\n    '[attr.tabindex]': 'disabled ? null : tabIndex',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationsDisabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n  CanDisableRipple, RippleTarget, HasTabIndex {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /**\n   * Reference to the element that acts as the chip's ripple target. This element is\n   * dynamically added as a child node of the chip. The chip itself cannot be used as the\n   * ripple target because it must be the host of the focus indicator.\n   */\n  private _chipRippleTarget: HTMLElement;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down. The ripple config\n   * is set to the global ripple options since we don't have any configurable options for\n   * the chip ripples.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig & RippleGlobalOptions;\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._animationsDisabled ||\n           !!this.rippleConfig.disabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether animations for the chip are enabled. */\n  _animationsDisabled: boolean;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** Whether the chip list is in multi-selection mode. */\n  _chipListMultiple: boolean = false;\n\n  /** Whether the chip list as a whole is disabled. */\n  _chipListDisabled: boolean = false;\n\n  /** The chip avatar */\n  @ContentChild(MAT_CHIP_AVATAR) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MAT_CHIP_TRAILING_ICON) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(MAT_CHIP_REMOVE) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value !== undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /** Whether the chip is disabled. */\n  @Input()\n  get disabled(): boolean { return this._chipListDisabled || this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  protected _disabled: boolean = false;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ?\n        this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS)\n                  globalRippleOptions: RippleGlobalOptions | null,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Attribute('tabindex') tabIndex?: string) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = _document.createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef);\n\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement as HTMLElement;\n\n    if (element.hasAttribute(basicChipAttrName) ||\n        element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._changeDetectorRef.markForCheck();\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n  static ngAcceptInputType_removable: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  },\n  providers: [{provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove}],\n})\nexport class MatChipRemove {\n  constructor(\n    protected _parentChip: MatChip,\n    elementRef: ElementRef<HTMLElement>) {\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n   }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nclass MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nconst _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n@Component({\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'role ? required : null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip, {\n    // We need to use `descendants: true`, because Ivy will no longer match\n    // indirect descendants if it's left as false.\n    descendants: true\n  }) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHomeAndEnd()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n\n    // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options?: FocusOptions): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options?: FocusOptions) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n\n  /** Syncs the list's state with the individual chips. */\n  private _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selectable: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {hasModifierKey, TAB} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MatChipsDefaultOptions, MAT_CHIPS_DEFAULT_OPTIONS} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n    '[attr.aria-required]': '_chipList && _chipList.required || null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: readonly number[] | ReadonlySet<number> =\n      this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n    // want to do this when going backwards, because focus should go back to the first chip.\n    if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n      this._chipList._allowFocusEscape();\n    }\n\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(options?: FocusOptions): void {\n    this._inputElement.focus(options);\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(event: KeyboardEvent) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n\n  static ngAcceptInputType_addOnBlur: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher, MatCommonModule} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './chips-module';\nexport * from './chip-list';\nexport * from './chip';\nexport * from './chip-input';\nexport * from './chip-default-options';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}