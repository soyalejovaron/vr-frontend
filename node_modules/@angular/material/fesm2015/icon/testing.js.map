{"version":3,"file":"testing.js","sources":["../../../../../../src/material/icon/testing/icon-harness.ts","../../../../../../src/material/icon/testing/icon-harness-filters.ts","../../../../../../src/material/icon/testing/fake-icon-registry.ts","../../../../../../src/material/icon/testing/public-api.ts","../../../../../../src/material/icon/testing/index.ts"],"names":["observableOf"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentHarness, HarnessPredicate} from '@angular/cdk/testing';\nimport {IconHarnessFilters, IconType} from './icon-harness-filters';\n\n\n/** Harness for interacting with a standard mat-icon in tests. */\nexport class MatIconHarness extends ComponentHarness {\n  /** The selector for the host element of a `MatIcon` instance. */\n  static hostSelector = '.mat-icon';\n\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatIconHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which icon instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n  static with(options: IconHarnessFilters = {}): HarnessPredicate<MatIconHarness> {\n    return new HarnessPredicate(MatIconHarness, options)\n        .addOption('type', options.type,\n            async (harness, type) => (await harness.getType()) === type)\n        .addOption('name', options.name,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getName(), text))\n        .addOption('namespace', options.namespace,\n            (harness, text) => HarnessPredicate.stringMatches(harness.getNamespace(), text));\n  }\n\n  /** Gets the type of the icon. */\n  async getType(): Promise<IconType> {\n    const type = await (await this.host()).getAttribute('data-mat-icon-type');\n    return type === 'svg' ? IconType.SVG : IconType.FONT;\n  }\n\n  /** Gets the name of the icon. */\n  async getName(): Promise<string | null> {\n    const host = await this.host();\n    const nameFromDom = await host.getAttribute('data-mat-icon-name');\n\n    // If we managed to figure out the name from the attribute, use it.\n    if (nameFromDom) {\n      return nameFromDom;\n    }\n\n    // Some icons support defining the icon as a ligature.\n    // As a fallback, try to extract it from the DOM text.\n    if (await this.getType() === IconType.FONT) {\n      return host.text();\n    }\n\n    return null;\n  }\n\n  /** Gets the namespace of the icon. */\n  async getNamespace(): Promise<string | null> {\n    return (await this.host()).getAttribute('data-mat-icon-namespace');\n  }\n\n  /** Gets whether the icon is inline. */\n  async isInline(): Promise<boolean> {\n    return (await this.host()).hasClass('mat-icon-inline');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BaseHarnessFilters} from '@angular/cdk/testing';\n\n/** Possible types of icons. */\nexport const enum IconType {SVG, FONT}\n\n/** A set of criteria that can be used to filter a list of `MatIconHarness` instances. */\nexport interface IconHarnessFilters extends BaseHarnessFilters {\n  /** Filters based on the typef of the icon. */\n  type?: IconType;\n  /** Filters based on the name of the icon. */\n  name?: string | RegExp;\n  /** Filters based on the namespace of the icon. */\n  namespace?: string | null | RegExp;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgModule, OnDestroy} from '@angular/core';\nimport {MatIconRegistry} from '@angular/material/icon';\nimport {Observable, of as observableOf} from 'rxjs';\n\ntype PublicApi<T> = {\n  [K in keyof T]: T[K] extends (...x: any[]) => T ? (...x: any[]) => PublicApi<T> : T[K]\n};\n\n/**\n * A null icon registry that must be imported to allow disabling of custom\n * icons.\n */\n@Injectable()\nexport class FakeMatIconRegistry implements PublicApi<MatIconRegistry>, OnDestroy {\n  addSvgIcon(): this {\n    return this;\n  }\n\n  addSvgIconLiteral(): this {\n    return this;\n  }\n\n  addSvgIconInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconLiteralInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconSet(): this {\n    return this;\n  }\n\n  addSvgIconSetLiteral(): this {\n    return this;\n  }\n\n  addSvgIconSetInNamespace(): this {\n    return this;\n  }\n\n  addSvgIconSetLiteralInNamespace(): this {\n    return this;\n  }\n\n  registerFontClassAlias(): this {\n    return this;\n  }\n\n  classNameForFontAlias(alias: string): string {\n    return alias;\n  }\n\n  getDefaultFontSetClass() {\n    return 'material-icons';\n  }\n\n  getSvgIconFromUrl(): Observable<SVGElement> {\n    return observableOf(this._generateEmptySvg());\n  }\n\n  getNamedSvgIcon(): Observable<SVGElement> {\n    return observableOf(this._generateEmptySvg());\n  }\n\n  setDefaultFontSetClass(): this {\n    return this;\n  }\n\n  addSvgIconResolver(): this {\n    return this;\n  }\n\n  ngOnDestroy() { }\n\n  private _generateEmptySvg(): SVGElement {\n    const emptySvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    emptySvg.classList.add('fake-testing-svg');\n    // Emulate real icon characteristics from `MatIconRegistry` so size remains consistent in tests.\n    emptySvg.setAttribute('fit', '');\n    emptySvg.setAttribute('height', '100%');\n    emptySvg.setAttribute('width', '100%');\n    emptySvg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    emptySvg.setAttribute('focusable', 'false');\n    return emptySvg;\n  }\n}\n\n/** Import this module in tests to install the null icon registry. */\n@NgModule({\n  providers: [{provide: MatIconRegistry, useClass: FakeMatIconRegistry}]\n})\nexport class MatIconTestingModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './icon-harness';\nexport * from './icon-harness-filters';\nexport * from './fake-icon-registry';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}