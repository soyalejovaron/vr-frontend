/**
 * @fileoverview added by tsickle
 * Generated from: performance.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, Injectable } from '@angular/core';
import { first, tap } from 'rxjs/operators';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const IS_STABLE_START_MARK = '_isStableStart';
/** @type {?} */
const IS_STABLE_END_MARK = '_isStableEnd';
/**
 * @return {?}
 */
function markStarts() {
    if (typeof (window) !== 'undefined' && window.performance) {
        window.performance.mark(IS_STABLE_START_MARK);
        return true;
    }
    else {
        return false;
    }
}
/** @type {?} */
const started = markStarts();
export class PerformanceMonitoringService {
    /**
     * @param {?} appRef
     */
    constructor(appRef) {
        if (started) {
            this.disposable = appRef.isStable.pipe(first((/**
             * @param {?} it
             * @return {?}
             */
            it => it)), tap((/**
             * @return {?}
             */
            () => {
                window.performance.mark(IS_STABLE_END_MARK);
                window.performance.measure('isStable', IS_STABLE_START_MARK, IS_STABLE_END_MARK);
            }))).subscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.disposable) {
            this.disposable.unsubscribe();
        }
    }
}
PerformanceMonitoringService.ɵfac = function PerformanceMonitoringService_Factory(t) { return new (t || PerformanceMonitoringService)(ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef)); };
PerformanceMonitoringService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PerformanceMonitoringService, factory: PerformanceMonitoringService.ɵfac });
/** @nocollapse */
PerformanceMonitoringService.ctorParameters = () => [
    { type: ApplicationRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PerformanceMonitoringService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ApplicationRef }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    PerformanceMonitoringService.prototype.disposable;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZm9ybWFuY2Uuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vaG9tZS9ydW5uZXIvd29yay9hbmd1bGFyZmlyZS9hbmd1bGFyZmlyZS9zcmMvcGVyZm9ybWFuY2UvcGVyZm9ybWFuY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBRXRFLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUM7O0FBQWtCLE1BQVosb0JBQW9CLEdBQUcsZ0JBQWdCO0FBQzVDO0FBQWtCLE1BQWIsa0JBQWtCLEdBQUcsY0FBYztBQUV6QztBQUFLO0FBQWdCO0FBQXJCLFNBQVMsVUFBVTtBQUNsQixJQUFHLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLFdBQVcsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFO0FBQzdELFFBQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUNyRCxRQUFPLE9BQU8sSUFBSSxDQUFDO0FBQ25CLEtBQUk7QUFBRSxTQUFJO0FBQ1YsUUFBTyxPQUFPLEtBQUssQ0FBQztBQUNwQixLQUFJO0FBQ0wsQ0FBQztBQUVEO0FBQWtCLE1BQVosT0FBTyxHQUFHLFVBQVUsRUFBRTtBQUc1QixNQUFNLE9BQU8sNEJBQTRCO0FBQUk7QUFBUztBQUV4QztBQUFTLElBRW5CLFlBQVksTUFBc0I7QUFDckMsUUFBTyxJQUFJLE9BQU8sRUFBRTtBQUNwQixZQUFXLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2xDLEtBQUs7QUFBTztBQUNIO0FBQ0E7QUFBaUIsWUFGcEIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUMsRUFDZixHQUFHO0FBQU87QUFDQTtBQUFpQixZQUR2QixHQUFHLEVBQUU7QUFDeEIsZ0JBQW1CLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDL0QsZ0JBQW1CLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3BHLFlBQWUsQ0FBQyxFQUFDLENBQ0wsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN6QixTQUFRO0FBQ1IsSUFBRyxDQUFDO0FBRUw7QUFBUztBQUNBO0FBQVMsSUFEZCxXQUFXO0FBQ2QsUUFBTyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFBRyxZQUFELElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUM7QUFBRSxTQUFBO0FBQzlELElBQUcsQ0FBQztBQUVMOzBEQXJCQyxVQUFVO29KQUNSO0FBQUU7QUFBb0I7QUFFWCxZQXJCTCxjQUFjO0FBQUk7OzsrRUFBRTtBQUFFO0FBQWM7QUFBUztBQUNyRDtBQUFpQjtBQUFTLElBb0J2QixrREFBMkM7O0FBckJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBSUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFuQkEsQUFBQSxBQWxCQSxBQUFBLEFBcUJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpcnN0LCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmNvbnN0IElTX1NUQUJMRV9TVEFSVF9NQVJLID0gJ19pc1N0YWJsZVN0YXJ0JztcbmNvbnN0IElTX1NUQUJMRV9FTkRfTUFSSyA9ICdfaXNTdGFibGVFbmQnO1xuXG5mdW5jdGlvbiBtYXJrU3RhcnRzKCkge1xuICAgIGlmICh0eXBlb2Yod2luZG93KSAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tYXJrKElTX1NUQUJMRV9TVEFSVF9NQVJLKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuY29uc3Qgc3RhcnRlZCA9IG1hcmtTdGFydHMoKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBlcmZvcm1hbmNlTW9uaXRvcmluZ1NlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gICAgcHJpdmF0ZSBkaXNwb3NhYmxlOiBTdWJzY3JpcHRpb258dW5kZWZpbmVkO1xuXG4gICAgY29uc3RydWN0b3IoYXBwUmVmOiBBcHBsaWNhdGlvblJlZikge1xuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NhYmxlID0gYXBwUmVmLmlzU3RhYmxlLnBpcGUoXG4gICAgICAgICAgICAgICAgZmlyc3QoaXQgPT4gaXQpLFxuICAgICAgICAgICAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tYXJrKElTX1NUQUJMRV9FTkRfTUFSSyk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5tZWFzdXJlKCdpc1N0YWJsZScsIElTX1NUQUJMRV9TVEFSVF9NQVJLLCBJU19TVEFCTEVfRU5EX01BUkspO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApLnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc3Bvc2FibGUpIHsgdGhpcy5kaXNwb3NhYmxlLnVuc3Vic2NyaWJlKCk7IH1cbiAgICB9XG5cbn1cbiJdfQ==