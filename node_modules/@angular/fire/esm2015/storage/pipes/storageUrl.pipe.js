/**
 * @fileoverview added by tsickle
 * Generated from: pipes/storageUrl.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AsyncPipe } from '@angular/common';
import { ChangeDetectorRef, NgModule, Pipe } from '@angular/core';
import { AngularFireStorage } from '../storage';
/**
 * to be used with in combination with | async
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../storage';
export class GetDownloadURLPipe {
    /**
     * @param {?} storage
     * @param {?} cdr
     */
    constructor(storage, cdr) {
        this.storage = storage;
        this.asyncPipe = new AsyncPipe(cdr);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    transform(path) {
        if (path !== this.path) {
            this.path = path;
            this.downloadUrl$ = this.storage.ref(path).getDownloadURL();
        }
        return this.asyncPipe.transform(this.downloadUrl$);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
}
GetDownloadURLPipe.ɵfac = function GetDownloadURLPipe_Factory(t) { return new (t || GetDownloadURLPipe)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AngularFireStorage), ɵngcc0.ɵɵinjectPipeChangeDetectorRef()); };
GetDownloadURLPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "getDownloadURL", type: GetDownloadURLPipe, pure: false });
/** @nocollapse */
GetDownloadURLPipe.ctorParameters = () => [
    { type: AngularFireStorage },
    { type: ChangeDetectorRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipe, [{
        type: Pipe,
        args: [{
                name: 'getDownloadURL',
                pure: false
            }]
    }], function () { return [{ type: ɵngcc1.AngularFireStorage }, { type: ɵngcc0.ChangeDetectorRef }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.asyncPipe;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.path;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.downloadUrl$;
    /**
     * @type {?}
     * @private
     */
    GetDownloadURLPipe.prototype.storage;
}
export class GetDownloadURLPipeModule {
}
GetDownloadURLPipeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GetDownloadURLPipeModule });
GetDownloadURLPipeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GetDownloadURLPipeModule_Factory(t) { return new (t || GetDownloadURLPipeModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GetDownloadURLPipeModule, { declarations: [GetDownloadURLPipe], exports: [GetDownloadURLPipe] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GetDownloadURLPipeModule, [{
        type: NgModule,
        args: [{
                declarations: [GetDownloadURLPipe],
                exports: [GetDownloadURLPipe]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZVVybC5waXBlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ob21lL3J1bm5lci93b3JrL2FuZ3VsYXJmaXJlL2FuZ3VsYXJmaXJlL3NyYy9zdG9yYWdlL3BpcGVzL3N0b3JhZ2VVcmwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFhLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFNUYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRWhEO0FBQUs7QUFDSDs7O0FBSUYsTUFBTSxPQUFPLGtCQUFrQjtBQUFJO0FBQVM7QUFFNUM7QUFBdUI7QUFDdkIsSUFHRSxZQUFvQixPQUEyQixFQUFFLEdBQXNCO0FBQ3hFLFFBRHFCLFlBQU8sR0FBUCxPQUFPLENBQW9CO0FBQUUsUUFDL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QyxJQUFDLENBQUM7QUFFSDtBQUFTO0FBQ0o7QUFBb0I7QUFDckIsSUFGRixTQUFTLENBQUMsSUFBWTtBQUN2QixRQUFHLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7QUFDM0IsWUFBSyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUN0QixZQUFLLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDakUsU0FBSTtBQUNKLFFBQUcsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdEQsSUFBQyxDQUFDO0FBRUg7QUFBUztBQUNFO0FBQVMsSUFEbEIsV0FBVztBQUNaLFFBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUNoQyxJQUFDLENBQUM7QUFFSDtnREExQkMsSUFBSSxTQUFDLG1CQUNKLElBQUksRUFBRSxnQkFBZ0IsbUJBQ3RCLElBQUksRUFBRSxLQUFLLGdCQUNaO2tIQUNLO0FBQUU7QUFBb0I7QUFFMUIsWUFUTyxrQkFBa0I7QUFBSyxZQUZ2QixpQkFBaUI7QUFBSTs7Ozs7Ozt1SEFBRTtBQUFFO0FBQWM7QUFBUztBQUFrQjtBQUFpQjtBQUNwRixJQVVOLHVDQUE2QjtBQUM5QjtBQUFTO0FBQ047QUFBaUI7QUFBUyxJQUQ1QixrQ0FBcUI7QUFDdEI7QUFBUztBQUFrQjtBQUV6QjtBQUFTLElBRlYsMENBQXNDO0FBRXhDO0FBQVM7QUFBa0I7QUFBaUI7QUFBUyxJQUF2QyxxQ0FBbUM7QUFBRTtBQXNCbkQsTUFBTSxPQUFPLHdCQUF3QjtBQUNyQztzREFMQyxRQUFRLFNBQUMsbUJBQ1I7U0FBWSxFQUFFLENBQUUsa0JBQWtCLENBQUUsbUJBQ3BDLE9BQU8sRUFBRSxDQUFFLGtCQUFrQixDQUFFLGdCQUNoQzs7Ozs7Ozs7O0FBckNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF4QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTkEsQUFBQSxBQUZBLEFBQUEsQUFXQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBc0JBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY1BpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nTW9kdWxlLCBPbkRlc3Ryb3ksIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFuZ3VsYXJGaXJlU3RvcmFnZSB9IGZyb20gJy4uL3N0b3JhZ2UnO1xuXG4vKiogdG8gYmUgdXNlZCB3aXRoIGluIGNvbWJpbmF0aW9uIHdpdGggfCBhc3luYyAqL1xuQFBpcGUoe1xuICBuYW1lOiAnZ2V0RG93bmxvYWRVUkwnLFxuICBwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgR2V0RG93bmxvYWRVUkxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIGFzeW5jUGlwZTogQXN5bmNQaXBlO1xuICBwcml2YXRlIHBhdGg6IHN0cmluZztcbiAgcHJpdmF0ZSBkb3dubG9hZFVybCQ6IE9ic2VydmFibGU8YW55PjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0b3JhZ2U6IEFuZ3VsYXJGaXJlU3RvcmFnZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHRoaXMuYXN5bmNQaXBlID0gbmV3IEFzeW5jUGlwZShjZHIpO1xuICB9XG5cbiAgdHJhbnNmb3JtKHBhdGg6IHN0cmluZykge1xuICAgIGlmIChwYXRoICE9PSB0aGlzLnBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgICB0aGlzLmRvd25sb2FkVXJsJCA9IHRoaXMuc3RvcmFnZS5yZWYocGF0aCkuZ2V0RG93bmxvYWRVUkwoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXN5bmNQaXBlLnRyYW5zZm9ybSh0aGlzLmRvd25sb2FkVXJsJCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmFzeW5jUGlwZS5uZ09uRGVzdHJveSgpO1xuICB9XG5cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbIEdldERvd25sb2FkVVJMUGlwZSBdLFxuICBleHBvcnRzOiBbIEdldERvd25sb2FkVVJMUGlwZSBdLFxufSlcbmV4cG9ydCBjbGFzcyBHZXREb3dubG9hZFVSTFBpcGVNb2R1bGUge31cbiJdfQ==